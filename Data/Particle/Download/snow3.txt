{"id": 3, "style": "Snow", "contentVariable": "", "contentFunction": "mediump vec2 mod289(mediump vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nmediump vec3 mod289(mediump vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nmediump vec4 mod289(mediump vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nmediump vec3 permute(mediump vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nmediump vec4 permute(mediump vec4 x) {\n    return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\nmediump vec4 taylorInvSqrt(mediump vec4 r){\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nmediump float snoise(mediump vec2 v){\n    const mediump vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n    mediump vec2 i  = floor(v + dot(v, C.yy));\n    mediump vec2 x0 = v -   i + dot(i, C.xx);\n    mediump vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    mediump vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i);\n    mediump vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))\n    + i.x + vec3(0.0, i1.x, 1.0));\n    mediump vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);\n    m = m*m;\n    m = m*m;\n    mediump vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    mediump vec3 h = abs(x) - 0.5;\n    mediump vec3 ox = floor(x + 0.5);\n    mediump vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n    mediump vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n\n    return 130.0 * dot(m, g);\n}\n\nmediump float cellular2x2(mediump vec2 P){\n    #define K 0.142857142857\n    #define K2 0.0714285714285\n    #define jitter 0.8\n\n    mediump vec2 Pi = mod(floor(P), 289.0);\n    mediump vec2 Pf = fract(P);\n    mediump vec4 Pfx = Pf.x + vec4(-0.5, -1.5, -0.5, -1.5);\n    mediump vec4 Pfy = Pf.y + vec4(-0.5, -0.5, -1.5, -1.5);\n    mediump vec4 p = permute(Pi.x + vec4(0.0, 1.0, 0.0, 1.0));\n    p = permute(p + Pi.y + vec4(0.0, 0.0, 1.0, 1.0));\n    mediump vec4 ox = mod(p, 7.0)*K+K2;\n    mediump vec4 oy = mod(floor(p*K), 7.0)*K+K2;\n    mediump vec4 dx = Pfx + jitter*ox;\n    mediump vec4 dy = Pfy + jitter*oy;\n    mediump vec4 d = dx * dx + dy * dy;\n    d.xy = min(d.xy, d.zw);\n    d.x = min(d.x, d.y);\n    return d.x;\n}", "contentParticle": "uv = gl_FragCoord.xy / iResolution.xy;\n    uv.x*=(iResolution.x/iResolution.y);\n    mediump vec2 GA=vec2(0);\n    #define dir 0\n    #define speed 0.3\n    #if dir==0\n    GA.y +=iTime*speed;\n    #elif dir==1\n    GA.y -=iTime*speed;\n    #elif dir==2\n    GA.x +=iTime*speed;\n    #elif dir==3\n    GA.x -=iTime*speed;\n    #endif\n\n    mediump float   F1, F2, F3, F4, F5, F6, F7, F8=0.0;\n    mediump float   N1, N2, N3, N4, N5, N6, N7, N8=0.0;\n    mediump float A, A1, A2, A3, A4, A5, A6, A7, A8=0.0;\n\n    F1 = 1.0-cellular2x2((uv+(GA*0.1))*8.0);\n    A1 = 1.0-(A*0.8);\n    N1 = smoothstep(0.998, 1.0, F1)*0.2*A1;\n\n    F2 = 1.0-cellular2x2((uv+(GA*0.2))*7.0);\n    A2 = 1.0-(A*0.8);\n    N2 = smoothstep(0.998, 1.0, F2)*0.3*A2;\n\n    F3 = 1.0-cellular2x2((uv+(GA*0.3))*6.0);\n    A3 = 1.0-(A*0.8);\n    N3 = smoothstep(0.998, 1.0, F3)*0.4*A3;\n\n    F4 = 1.0-cellular2x2((uv+(GA*0.4))*5.0);\n    A4 = 1.0-(A*0.8);\n    N4 = smoothstep(0.998, 1.0, F4)*0.5*A4;\n    mediump float cl= N4+N3+N2+N1;\n    particle = vec3(cl, cl, cl)*3.;"}