{"id": 5, "style": "General", "contentVariable": "#define PASS_COUNT 1\n\nmediump float fBrightness = 2.5;\nmediump float fSteps = 121.0;\n\nmediump float fParticleSize = 0.015;\nmediump float fParticleLength = 0.5 / 60.0;\nmediump float fMinDist = 0.8;\nmediump float fMaxDist = 5.0;\n\nmediump float fRepeatMin = 1.0;\nmediump float fRepeatMax = 2.0;\nmediump float fDepthFade = 0.8;", "contentFunction": "mediump float Random(mediump float x){\n    return fract(sin(x * 123.456) * 23.4567 + sin(x * 345.678) * 45.6789 + sin(x * 456.789) * 56.789);\n}\n\nmediump vec3 GetParticleColour( const in mediump vec3 vParticlePos, const in mediump float fParticleSize, const in mediump vec3 vRayDir ){\n    mediump vec2 vNormDir = normalize(vRayDir.xy);\n    mediump float d1 = dot(vParticlePos.xy, vNormDir.xy) / length(vRayDir.xy);\n    mediump vec3 vClosest2d = vRayDir * d1;\n\n    mediump vec3 vClampedPos = vParticlePos;\n\n    vClampedPos.z = clamp(vClosest2d.z, vParticlePos.z - fParticleLength, vParticlePos.z + fParticleLength);\n\n    mediump float d = dot(vClampedPos, vRayDir);\n\n    mediump vec3 vClosestPos = vRayDir * d;\n\n    mediump vec3 vDeltaPos = vClampedPos - vClosestPos;\n\n    mediump float fClosestDist = length(vDeltaPos) / fParticleSize;\n\n    mediump float fShade = \tclamp(1.0 - fClosestDist, 0.0, 1.0);\n\n    fShade = fShade * exp2(-d * fDepthFade) * fBrightness;\n\n    return vec3(fShade);\n}\n\nmediump vec3 GetParticlePos( const in mediump vec3 vRayDir, const in mediump float fZPos, const in mediump float fSeed ){\n    mediump float fAngle = atan(vRayDir.x, vRayDir.y);\n    mediump float fAngleFraction = fract(fAngle / (3.14 * 2.0));\n\n    mediump float fSegment = floor(fAngleFraction * fSteps + fSeed) + 0.5 - fSeed;\n    mediump float fParticleAngle = fSegment / fSteps * (3.14 * 2.0);\n\n    mediump float fSegmentPos = fSegment / fSteps;\n    mediump float fRadius = fMinDist + Random(fSegmentPos + fSeed) * (fMaxDist - fMinDist);\n\n    mediump float tunnelZ = vRayDir.z / length(vRayDir.xy / fRadius);\n\n    tunnelZ += fZPos;\n\n    mediump float fRepeat = fRepeatMin + Random(fSegmentPos + 0.1 + fSeed) * (fRepeatMax - fRepeatMin);\n\n    mediump float fParticleZ = (ceil(tunnelZ / fRepeat) - 0.5) * fRepeat - fZPos;\n\n    return vec3( sin(fParticleAngle) * fRadius, cos(fParticleAngle) * fRadius, fParticleZ );\n}\n\nmediump vec3 Starfield( const in mediump vec3 vRayDir, const in mediump float fZPos, const in mediump float fSeed ){\n    mediump vec3 vParticlePos = GetParticlePos(vRayDir, fZPos, fSeed);\n\n    return GetParticleColour(vParticlePos, fParticleSize, vRayDir);\n}\n\nmediump vec3 RotateX( const in mediump vec3 vPos, const in mediump float fAngle ){\n    mediump float s = sin(fAngle);\n    mediump float c = cos(fAngle);\n\n    mediump vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\n\n    return vResult;\n}\n\nmediump vec3 RotateY( const in mediump vec3 vPos, const in mediump float fAngle ){\n    mediump float s = sin(fAngle);\n    mediump float c = cos(fAngle);\n\n    mediump vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n\n    return vResult;\n}\n\nmediump vec3 RotateZ( const in mediump vec3 vPos, const in mediump float fAngle ){\n    mediump float s = sin(fAngle);\n    mediump float c = cos(fAngle);\n\n    mediump vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\n\n    return vResult;\n}", "contentParticle": "uv = gl_FragCoord.xy / iResolution.xy;\n    mediump vec2 vScreenPos = uv * 2.0 - 1.0;\n    vScreenPos.x *= iResolution.x / iResolution.y;\n    mediump vec3 vRayDir = normalize(vec3(vScreenPos, 1.0));\n    mediump vec3 vEuler = vec3(0.5 + sin(iTime * 0.2) * 0.125, 0.5 + sin(iTime * 0.1) * 0.125, iTime * 0.1 + sin(iTime * 0.3) * 0.5);\n    vRayDir = RotateX(vRayDir, vEuler.x);\n    vRayDir = RotateY(vRayDir, vEuler.y);\n    vRayDir = RotateZ(vRayDir, vEuler.z);\n    mediump float fShade = 0.0;\n    mediump float a = 0.2;\n    mediump float b = 10.0;\n    mediump float c = 1.0;\n    mediump float fZPos = 5.0 + iTime * c + sin(iTime * a) * b;\n    mediump  float fSpeed = c + a * b * cos(a * iTime);\n    fParticleLength = 0.25 * fSpeed / 60.0;\n    mediump float fSeed = 0.0;\n    mediump vec3 vResult = mix(vec3(0.005, 0.0, 0.01), vec3(0.01, 0.005, 0.0), vRayDir.y * 0.5 + 0.5);\n    for(mediump int i=0; i<PASS_COUNT; i++){\n        vResult += Starfield(vRayDir, fZPos, fSeed);\n        fSeed += 1.234;\n    }\n\n    particle = sqrt(vResult);"}