{"id": 3, "style": "Matrix", "contentVariable": "", "contentFunction": "mediump float distLine(mediump vec2 p, mediump vec2 a, mediump vec2 b){\n    mediump vec2 pa = p - a;\n    mediump vec2 ba = b - a;\n    mediump float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba*t);\n}\n\nmediump float line(mediump vec2 p, mediump vec2 a, mediump vec2 b){\n    mediump float d = distLine(p, a, b);\n    mediump float m = smoothstep(0.03, 0.01, d);\n    mediump float d2 =  length(a - b);\n    m *= smoothstep(1.2, 0.8, d2) * 0.5 + smoothstep(0.05, 0.03, abs(d2 - 0.75));\n    return m;\n}\n\nmediump float distTriangle(in mediump vec2 p, in mediump vec2 p0, in mediump vec2 p1, in mediump vec2 p2)\n{\n    mediump vec2 e0 = p1 - p0;\n    mediump vec2 e1 = p2 - p1;\n    mediump vec2 e2 = p0 - p2;\n\n    mediump vec2 v0 = p - p0;\n    mediump vec2 v1 = p - p1;\n    mediump vec2 v2 = p - p2;\n\n    mediump vec2 pq0 = v0 - e0*clamp(dot(v0, e0)/dot(e0, e0), 0.0, 1.0);\n    mediump vec2 pq1 = v1 - e1*clamp(dot(v1, e1)/dot(e1, e1), 0.0, 1.0);\n    mediump vec2 pq2 = v2 - e2*clamp(dot(v2, e2)/dot(e2, e2), 0.0, 1.0);\n\n    mediump float s = sign(e0.x*e2.y - e0.y*e2.x);\n    mediump vec2 d = min(min(vec2(dot(pq0, pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n    vec2(dot(pq1, pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n    vec2(dot(pq2, pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n\n    return -sqrt(d.x)*sign(d.y);\n}\n\nmediump float triangle(mediump vec2 p, mediump vec2 a, mediump vec2 b, mediump vec2 c){\n    mediump float d = distTriangle(p, a, b, c);\n    mediump float m = smoothstep(0.03, 0.01, d);\n    mediump float d2 =  length(a - b);\n    m *= smoothstep(1.2, 0.8, d2) * 0.5 + smoothstep(0.05, 0.03, abs(d2 - 0.75));\n    return m;\n}\n\nmediump float N21(mediump vec2 p){\n    p = fract(p * vec2(233.34, 851.73));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n\nmediump vec2 N22(mediump vec2 p){\n    mediump float n = N21(p);\n    return vec2(n, N21(p + n));\n}\n\nmediump vec2 getPos(mediump vec2 id, mediump vec2 offset){\n    mediump vec2 n = N22(id + offset) * iTime;\n    return offset + sin(n) * 0.4;\n}\n\nmediump float layer(mediump vec2 uv){\n    mediump vec2 gv = fract(uv) - 0.5;\n    mediump vec2 id = floor(uv);\n\n    mediump vec2 p[9];\n    mediump int   i = 0;\n    for (mediump float y = -1.0; y <= 1.0; y++){\n        for (mediump float x = -1.0; x <= 1.0; x++){\n            p[i++] = getPos(id, vec2(x, y));\n        }\n    }\n\n\n    mediump float t = iTime * 10.0;\n    mediump float m = 0.0;\n    for (mediump int   i = 0; i < 9; i++){\n        m += line(gv, p[4], p[i]);\n\n        mediump vec2 j = (p[i] - gv) * 20.0;\n        mediump float sparkle = 1.0 / dot(j, j);\n\n        m += sparkle * (sin(t + fract(p[i].x) * 10.0) * 0.5 + 0.5);\n\n        for (mediump int   yi= i + 1; yi < 9; yi++){\n            for (mediump int   zi= yi + 1; zi < 9; zi++){\n\n                mediump float len1 = abs(length(p[i] - p[yi]));\n                mediump float len2 = abs(length(p[yi] - p[zi]));\n                mediump float len3 = abs(length(p[i] - p[zi]));\n\n                if ((len1 + len2 + len3) < 2.8){\n                    m += triangle(gv, p[i], p[yi], p[zi]) * 0.8;\n                }\n            }\n        }\n    }\n    m += line(gv, p[1], p[3]);\n    m += line(gv, p[1], p[5]);\n    m += line(gv, p[7], p[3]);\n    m += line(gv, p[7], p[5]);\n\n    return m;\n}", "contentParticle": "uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    mediump float m = 0.0;\n    mediump float t = iTime * 0.1;\n    mediump float gradient = uv.y;\n    mediump float s = sin(t);\n    mediump float c = cos(t);\n    mediump mat2 rot = mat2(c, -s, s, c);\n    uv *= rot;\n    for (mediump float i = 0.0; i < 0.25; i += 1.0 / 4.0){\n        mediump float z = fract(i + t);\n        mediump float size = mix(10.0, 0.5, z);\n        mediump float fade = smoothstep(0.0, 0.5, z) * smoothstep(1.0, 0.8, z);\n        m += layer(uv * size + i * 20.0) * fade;\n    }\n    mediump vec3    base = sin(t * 5.0 * vec3(0.345, 0.456, 0.567)) * 0.4 + 0.6;\n    mediump vec3    col = m * base;\n    col -= gradient * base;\n    particle = col;"}