{
  "audioUrl": "Music/Audio/HipHop/the-trap-99528.mp3",
  "audioFileName": "the-trap-99528.mp3",
  "thumbUrl": "Thumb/Download/thumb_5.png",
  "thumbFileName": "thumb_5.png",
  "visualizerSource": {
    "contentVariable": "",
    "contentFunction": "void tRotate(inout mediump vec2 p, mediump float angel) {\n    mediump float s = sin(angel), c = cos(angel);\n    p *= mat2(c, -s, s, c);\n}\n\nmediump float sdCircle(mediump vec2 p, mediump float r) {\n    return length(p) - r;\n}\n\nmediump float opU(mediump float a, mediump float b) {\n    return min(a, b);\n}\n\nmediump float opS(mediump float a, mediump float b) {\n    return max(a, -b);\n}\n\nmediump float sdArk(mediump vec2 p, mediump float ir, mediump float or, mediump float a) {\n    mediump float d = sdCircle(p, or);\n    d = opS(d, sdCircle(p, ir));\n    tRotate(p, -a * 3.14159265359 / 2.);\n    d = opS(d, -p.y);\n    d = opU(d, sdCircle(p - vec2((or + ir) / 2., 0.), (or - ir) / 2.));\n    return d;\n}",
    "contentVisualizer": "#define BARS 24.\n    uv = gl_FragCoord.xy / iResolution.xy * 2. - 1.;\n    if (iResolution.x > iResolution.y) {\n        uv.x *= iResolution.x / iResolution.y;\n    } else {\n        uv.y *= iResolution.y / iResolution.x;\n    }\n    mediump float d = sdCircle(uv, 2.5);\n    d = opS(d, sdCircle(uv, .1));\n    d = opU(d, sdCircle(uv, .1));\n    mediump float barsStart = .17;\n    mediump float barsEnd = .99;\n    mediump float barId = floor((length(uv) -barsStart) / (barsEnd - barsStart) * BARS);\n    if (barId >= 0. && barId < BARS) {\n        mediump float barWidth = (barsEnd - barsStart) / BARS;\n        mediump float barStart = barsStart + barWidth * (barId + .25);\n        mediump float barAngel = texture2D(iChannel0, vec2(1. - barId / BARS, .25)).x * .5;\n        tRotate(uv, -barAngel * .2 * sin(barId + iTime));\n        uv = abs(uv);\n        d = opS(d, sdArk(uv, barStart, barStart + barWidth / 2., barAngel));\n    }\n    mediump float w = min(fwidth(d), .01);\n    visualizer = vec3(smoothstep(-w, w, d));"
  },
  "particleSource": {
    "contentVariable": "#define PASS_COUNT 1\nhighp float fBrightness=2.5;\nhighp float fSteps=222.;\nhighp float fParticleSize=.015;\nhighp float fParticleLength=.5/60.;\nhighp float fMinDist=.8;\nhighp float fMaxDist=5.;\nhighp float fRepeatMin=1.;\nhighp float fRepeatMax=2.;\nhighp float fDepthFade=1.2;\nconst highp float sharpness=2.;",
    "contentFunction": "highp float Random(highp float x){\n    return fract(sin(x*123.456)*23.4567+sin(x*345.678)*45.6789+sin(x*456.789)*56.789);\n}\n\nhighp vec3 GetParticleColour(const in highp vec3 vParticlePos,const in highp float fParticleSize,const in highp vec3 vRayDir){\n    highp vec2 vNormDir=normalize(vRayDir.xy);\n    highp float d1=dot(vParticlePos.xy,vNormDir.xy)/length(vRayDir.xy);\n    highp vec3 vClosest2d=vRayDir*d1;\n\n    highp vec3 vClampedPos=vParticlePos;\n\n    vClampedPos.z=clamp(vClosest2d.z,vParticlePos.z-fParticleLength,vParticlePos.z+fParticleLength);\n\n    highp float d=dot(vClampedPos,vRayDir);\n\n    highp vec3 vClosestPos=vRayDir*d;\n\n    highp vec3 vDeltaPos=vClampedPos-vClosestPos;\n\n    highp float fClosestDist=length(vDeltaPos)/fParticleSize;\n\n    highp float fShade=clamp(1.-fClosestDist,0.,1.);\n\n    fShade=fShade*exp2(-d*fDepthFade)*fBrightness;\n\n    return vec3(fShade);\n}\n\nhighp vec3 GetParticlePos(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp float fAngle=atan(vRayDir.x,vRayDir.y);\n    highp float fAngleFraction=fract(fAngle/(3.14*2.));\n\n    highp float fSegment=floor(fAngleFraction*fSteps+fSeed)+.5-fSeed;\n    highp float fParticleAngle=fSegment/fSteps*(3.14*2.);\n\n    highp float fSegmentPos=fSegment/fSteps;\n    highp float fRadius=fMinDist+Random(fSegmentPos+fSeed)*(fMaxDist-fMinDist);\n\n    highp float tunnelZ=vRayDir.z/length(vRayDir.xy/fRadius);\n\n    tunnelZ+=fZPos;\n\n    highp float fRepeat=fRepeatMin+Random(fSegmentPos+.1+fSeed)*(fRepeatMax-fRepeatMin);\n\n    highp float fParticleZ=(ceil(tunnelZ/fRepeat)-.5)*fRepeat-fZPos;\n\n    return vec3(sin(fParticleAngle)*fRadius,cos(fParticleAngle)*fRadius,fParticleZ);\n}\n\nhighp vec3 Starfield(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp vec3 vParticlePos=GetParticlePos(vRayDir,fZPos,fSeed);\n    return GetParticleColour(vParticlePos,fParticleSize,vRayDir);\n}\n\nhighp float sharpen(highp float pix_coord){\n    highp float norm=(fract(pix_coord)-.5)*2.;\n    highp float norm2=norm*norm;\n    return floor(pix_coord)+norm*pow(norm2,sharpness)/2.+.5;\n}",
    "contentParticle": "uv = gl_FragCoord.xy/iResolution.xy;\n    highp vec2 vScreenPos=uv*2.-1.;\n    vScreenPos.x*=iResolution.x/iResolution.y;\n\n    highp vec3 vRayDir=normalize(vec3(vScreenPos,1.));\n\n    highp float fShade=0.;\n\n    highp float fZPos=5.+iTime;\n\n    fParticleLength=.00001;\n\n    highp float fSeed=0.;\n\n    highp vec3 vResult=mix(vec3(0.),vec3(0.),vRayDir.y*.5+.5);\n\n    for(highp int i=0;i<PASS_COUNT;i++){\n        vResult+=Starfield(vRayDir,fZPos,fSeed);\n        fSeed+=1.234;\n    }\n\n    particle =sqrt(vResult);"
  },
  "transitionSource": {
    "contentVariable": "const mediump float strength = 0.3;",
    "contentFunction": "mediump float Linear_ease(in mediump float begin, in mediump float change, in mediump float duration, in mediump float time) {\n return change * time / duration + begin;\n }\n\n mediump float Exponential_easeInOut(in mediump float begin, in mediump float change, in mediump float duration, in mediump float time) {\n if (time == 0.0)\n return begin;\nelse if (time == duration)\n return begin + change;\n time = time / (duration / 2.0);\n if (time < 1.0)\n return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;\n return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;\n }\n\n mediump float Sinusoidal_easeInOut(in mediump float begin, in mediump float change, in mediump float duration, in mediump float time) {\n return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;\n }\n\n mediump float random(in mediump vec3 scale, in mediump float seed) {\n return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n }\n\n mediump vec3 crossFade(in mediump vec2 uv, in mediump float dissolve) {\n return mix(texture2D(iChannel1, uv).rgb, texture2D(iChannel3, uv).rgb, dissolve);\n}",
    "contentTransition": "    mediump float progress = translatePercent;\n mediump vec2 center = vec2(Linear_ease(0.5, 0.0, 1.0, progress), 0.5);\n mediump float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, progress);\n mediump float strength = Sinusoidal_easeInOut(0.0, strength, 0.5, progress);\n mediump vec3 colorBg = vec3(0.0);\n mediump float total = 0.0;\n mediump vec2 toCenter = center - uv;\n mediump float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0)*0.5;\n for (mediump float t = 0.0; t <= 20.0; t++) {\n mediump float percent = (t + offset) / 20.0;\n mediump float weight = 1.0 * (percent - percent * percent);\n colorBg += crossFade(uv + toCenter * percent * strength, dissolve) * weight;\n total += weight;\n }\n background = colorBg/total;\n"
  },
  "backgroundEffectId": 1,
  "thumbEffectId":0
}