{
  "audioUrl": "Music/Audio/Rock/rock-me-better-9714.mp3",
  "audioFileName": "rock-me-better-9714.mp3",
  "thumbUrl": "Thumb/Download/thumb_14.png",
  "thumbFileName": "thumb_14.png",
  "visualizerSource": {
    "contentVariable": "const mediump float FREQ_RANGE = 64.0;\nconst mediump float BRIGHTNESS = 0.4;",
    "contentFunction": "mediump vec3 hsv2rgb(mediump vec3 c){\n    mediump vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    mediump vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmediump float luma(mediump vec3 color) {\n    return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nmediump float getfrequency(mediump float x) {\n    return texture2D(iChannel0, vec2(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE, 0.0)).x + 0.06;\n}\n\nmediump float getfrequency_smooth(mediump float x) {\n    mediump float index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n    mediump float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n    return mix(getfrequency(index), getfrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));\n}\n\nmediump float getfrequency_blend(mediump float x) {\n    return mix(getfrequency(x), getfrequency_smooth(x), 0.5);\n}\n\nmediump vec3 doHalo(mediump vec2 fragment, mediump float radius) {\n    const mediump float PI = 3.1415;\n    mediump float dist = length(fragment);\n    mediump float ring = 1.0 / (abs(dist - radius) + 0.005);\n\n    mediump float b = dist < radius ? BRIGHTNESS * 0.6 : BRIGHTNESS;\n\n    mediump vec3 col = vec3(0.0);\n\n    mediump float angle = atan(fragment.x, fragment.y);\n    col += hsv2rgb( vec3( ( angle + iTime * 0.25 ) / (PI * 2.0), 0.6, 0.5 ) ) * ring * b;\n\n    mediump float frequency = max(getfrequency(abs(angle / PI)) - 0.02, 0.0);\n    col *= frequency * 0.5;\n\n    // Black halo\n    col *= smoothstep(radius * 0.86, radius, dist);\n\n    return col;\n}\n\nmediump vec3 doLine(mediump vec2 fragment, mediump float radius, mediump float x) {\n    mediump vec3 col = hsv2rgb(vec3(x * 0.23 + iTime * 0.12, 1.0, 1.0));\n\n    mediump float freq = abs(fragment.x * 0.5);\n\n    col *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getfrequency(freq);\n    col = col * smoothstep(radius, radius * 1.8, abs(fragment.x));\n\n    return col;\n}",
    "contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    mediump float minSscreenSize = min(iResolution.x, iResolution.y);\n    mediump float radius =  minSscreenSize/2.5;\n    mediump float RADIUS = radius/minSscreenSize;\n    const mediump float SPEED = 0.6;\n    visualizer = vec3(0.0134, 0.052, 0.1);\n    visualizer += doHalo(uv, RADIUS);\n    mediump float c = cos(iTime * SPEED);\n    mediump float s = sin(iTime * SPEED);\n    mediump vec2 rot = mat2(c, s, -s, c) * uv;\n    visualizer += doLine(rot, RADIUS, rot.x);\n    visualizer += max(luma(visualizer) - 1.0, 0.0);"
  },
  "particleSource": {
    "contentVariable": "",
    "contentFunction": "mediump float vDrop(mediump vec2 uv,mediump float t){\n    uv.x = uv.x*300.0;\t\t\t\t\t\t\n    mediump float dx = fract(uv.x);\n    uv.x = floor(uv.x);\n    uv.y *= 0.05;\t\t\t\t\t\t\t\n    mediump float o=sin(uv.x);\t\t\t\t\n    mediump float s=cos(uv.x*33.1)*.3 +.7;\t\t\t\n    mediump float trail = mix(255.0,255.0,s);\t\t\t\n    mediump float yv = fract(uv.y + t*s + o) * trail;\n    yv = 1.0/yv;\n    yv = smoothstep(0.0,1.0,yv*yv);\n    yv = sin(yv*PI)*(s*5.0);\n    mediump float d2 = sin(dx*PI);\n    return yv*(d2*d2);\n}",
    "contentParticle": "uv = (gl_FragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    mediump float d = length(uv)+0.05;\n    uv = vec2(atan(uv.x, uv.y) / PI, 2.5 / d);\n    uv.y *= 0.5;\n    mediump float t =  iTime * 0.05;\n    particle = vec3(0.99,0.99,0.99) * vDrop(uv,t);\n    particle = particle *(d*d);"
  },
  "transitionSource": {
    "contentVariable": "#define fadeType 2\nmediump float fadeTimer = 0.0;\nmediump float gridWidth = 28.0, gridHeight = 15.0;",
    "contentFunction": "",
    "contentTransition": "fadeTimer = mod(1.75 + 1.72 * translatePercent, 3.5) - 1.25;\n        if (fadeTimer > .5) fadeTimer -= 1.75;\n        else fadeTimer += 1.75;\n        mediump vec4 outcol;\n        mediump vec2 posI =  vec2(uv.x * gridWidth * 2.0, uv.y * gridHeight * 2.0);\n        mediump vec2 pos = mod(posI, 2.0) - vec2(1.0, 1.0);\n        mediump float size;\n        posI = vec2(floor(posI.x/2.0)/gridWidth, floor(posI.y/2.0)/gridHeight);//Floor the values to round them to the value for the square they're in\n        if (fadeType == 0){\n            size = pow(fadeTimer - posI.y, 3.0);\n        } else if (fadeType == 1){\n            size = pow(fadeTimer - posI.x, 3.0);\n        } else {\n            size = pow(fadeTimer - (abs(posI.x - 0.5) + abs(posI.y - 0.5)), 3.0);\n        }\n        size = abs(size);\n        outcol = texture2D(iChannel3, uv);\n        if (abs(pos.x) + abs(pos.y) < size){\n            outcol =  texture2D(iChannel1, uv);\n        }\n        background = outcol.rgb;"
  },
  "backgroundEffectId": 1,
  "thumbEffectId":2
}