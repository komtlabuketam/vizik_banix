{
  "audioUrl": "Music/Audio/Electronic/electronic-rock-king-around-here-15045.mp3",
  "audioFileName": "electronic-rock-king-around-here-15045.mp3",
  "thumbUrl": "Thumb/Download/thumb_14.png",
  "thumbFileName": "thumb_14.png",
  "visualizerSource": {
    "contentVariable": "#define FREQ_STEP 0.001953125\n#define TWO_PI 6.283185",
    "contentFunction": "highp float getAvgVolume(highp float v, highp int steps){\n    highp float sum = 0.0;\n    highp float x = 0.0;\n    for (highp int i = 0; i < steps; i++){\n        x = fract(v + float(i) * FREQ_STEP);\n        sum += texture2D(iChannel0, vec2(pow(x, 2.1), 0.0)).r * pow(x, 0.08);\n    }\n    return sum /= float(steps);\n}",
    "contentVisualizer": "highp vec2 res = iResolution.xy;\n    uv = (2.0 * gl_FragCoord.xy - res) * 0.6 / min(res.x, res.y);\n    uv.x = abs(uv.x);\n    uv.y *= -1.0;\n    highp float ps = 1.0 / min(res.x, res.y);\n    highp float avgVolume = getAvgVolume(0.3, 1);\n    //Volume pulse\n    uv *= 1.0 - smoothstep(0.3, 1.1, avgVolume) * 0.7;\n    //Polar coordinates, x - length, y - frequency\n    highp vec2 polarUV = vec2(length(uv), atan(uv.y, uv.x) / TWO_PI);\n    polarUV.y = fract((polarUV.y + 0.2) * 0.8);\n    highp float volume = getAvgVolume(polarUV.y, 20);\n    volume = pow(smoothstep(0.0, 0.9, volume), 4.0 / (avgVolume)) * 0.4; //Adjusting freq volume\n    highp float distToFreq = (volume - polarUV.x + 0.2);\n    //line\n    visualizer += vec3(0.0, 0.0, 0.0)* smoothstep(1.0 - ps * 1.5, 1.0, 1.0 - abs(distToFreq))* smoothstep(-1.0, 1.0, avgVolume);\n    //a la blured line\n    visualizer += vec3(1.0, 0.55, 0.0)* smoothstep(1.0 - 0.008 * pow(avgVolume * 3.0 + 1.0, 2.0), 1.0, 1.0 - abs(distToFreq));\n    //flash\n    visualizer += vec3(1.0, 1.0, 1.0)* pow(avgVolume, 8.0)* (1.0 - polarUV.x);\n    //Center fill\n    visualizer += vec3(1.0, 1.0, 1.0)* smoothstep(0.0, 0.01, distToFreq);\n    //Center circles\n    visualizer += vec3(1.0, 0.55, 0.0)* smoothstep(0.1, 0.3, distToFreq)* smoothstep(0.1, 0.8, pow(avgVolume, 2.0));"
  },
  "particleSource": {
    "contentVariable": "#define PASS_COUNT 1\nhighp float fBrightness=2.5;\nhighp float fSteps=222.;\nhighp float fParticleSize=.015;\nhighp float fParticleLength=.5/60.;\nhighp float fMinDist=.8;\nhighp float fMaxDist=5.;\nhighp float fRepeatMin=1.;\nhighp float fRepeatMax=2.;\nhighp float fDepthFade=1.2;\nconst highp float sharpness=2.;",
    "contentFunction": "highp float Random(highp float x){\n    return fract(sin(x*123.456)*23.4567+sin(x*345.678)*45.6789+sin(x*456.789)*56.789);\n}\n\nhighp vec3 GetParticleColour(const in highp vec3 vParticlePos,const in highp float fParticleSize,const in highp vec3 vRayDir){\n    highp vec2 vNormDir=normalize(vRayDir.xy);\n    highp float d1=dot(vParticlePos.xy,vNormDir.xy)/length(vRayDir.xy);\n    highp vec3 vClosest2d=vRayDir*d1;\n\n    highp vec3 vClampedPos=vParticlePos;\n\n    vClampedPos.z=clamp(vClosest2d.z,vParticlePos.z-fParticleLength,vParticlePos.z+fParticleLength);\n\n    highp float d=dot(vClampedPos,vRayDir);\n\n    highp vec3 vClosestPos=vRayDir*d;\n\n    highp vec3 vDeltaPos=vClampedPos-vClosestPos;\n\n    highp float fClosestDist=length(vDeltaPos)/fParticleSize;\n\n    highp float fShade=clamp(1.-fClosestDist,0.,1.);\n\n    fShade=fShade*exp2(-d*fDepthFade)*fBrightness;\n\n    return vec3(fShade);\n}\n\nhighp vec3 GetParticlePos(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp float fAngle=atan(vRayDir.x,vRayDir.y);\n    highp float fAngleFraction=fract(fAngle/(3.14*2.));\n\n    highp float fSegment=floor(fAngleFraction*fSteps+fSeed)+.5-fSeed;\n    highp float fParticleAngle=fSegment/fSteps*(3.14*2.);\n\n    highp float fSegmentPos=fSegment/fSteps;\n    highp float fRadius=fMinDist+Random(fSegmentPos+fSeed)*(fMaxDist-fMinDist);\n\n    highp float tunnelZ=vRayDir.z/length(vRayDir.xy/fRadius);\n\n    tunnelZ+=fZPos;\n\n    highp float fRepeat=fRepeatMin+Random(fSegmentPos+.1+fSeed)*(fRepeatMax-fRepeatMin);\n\n    highp float fParticleZ=(ceil(tunnelZ/fRepeat)-.5)*fRepeat-fZPos;\n\n    return vec3(sin(fParticleAngle)*fRadius,cos(fParticleAngle)*fRadius,fParticleZ);\n}\n\nhighp vec3 Starfield(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp vec3 vParticlePos=GetParticlePos(vRayDir,fZPos,fSeed);\n    return GetParticleColour(vParticlePos,fParticleSize,vRayDir);\n}\n\nhighp float sharpen(highp float pix_coord){\n    highp float norm=(fract(pix_coord)-.5)*2.;\n    highp float norm2=norm*norm;\n    return floor(pix_coord)+norm*pow(norm2,sharpness)/2.+.5;\n}",
    "contentParticle": "uv = gl_FragCoord.xy/iResolution.xy;\n    highp vec2 vScreenPos=uv*2.-1.;\n    vScreenPos.x*=iResolution.x/iResolution.y;\n\n    highp vec3 vRayDir=normalize(vec3(vScreenPos,1.));\n\n    highp float fShade=0.;\n\n    highp float fZPos=5.+iTime;\n\n    fParticleLength=.00001;\n\n    highp float fSeed=0.;\n\n    highp vec3 vResult=mix(vec3(0.),vec3(0.),vRayDir.y*.5+.5);\n\n    for(highp int i=0;i<PASS_COUNT;i++){\n        vResult+=Starfield(vRayDir,fZPos,fSeed);\n        fSeed+=1.234;\n    }\n\n    particle =sqrt(vResult);"
  },
  "transitionSource": {
    "contentVariable": "",
    "contentFunction": "mediump vec2 polarCoordinates(in mediump vec2 st){\n    const mediump float pi = 3.1415926;\n    mediump vec2 sc = (st.xy - iResolution.xy / 2.0) / iResolution.y;\n    mediump float phi = atan(sc.y, sc.x + 1e-6);\n    return vec2(fract(phi / (pi * 2.)), length(sc));\n}",
    "contentTransition": "mediump vec2 coord = gl_FragCoord.xy;\n        const mediump float pi = 3.1415926;\n        mediump vec4 c1 = texture2D(iChannel3, uv);\n        mediump vec4 c2 = texture2D(iChannel1, uv);\n        mediump vec2 pc = polarCoordinates(coord);\n        mediump float dis = 0.8;\n        pc.x = pc.x + dis*pc.y;\n        mediump float h_divnum = 12.0;\n        mediump float dived = fract(pc.x * h_divnum);\n        mediump float h = 0.5;\n        mediump vec4 c = vec4(0.0);\n        mediump float ti = iTime + 8.;\n        mediump float value = translatePercent*2.0;\n        mediump float th = value - dived*h;\n        if (pc.y > th){\n            c = c2;\n        } else {\n            c = c1;\n        }\n        background = c.xyz;"
  },
  "backgroundEffectId": 1,
  "thumbEffectId":0
}