{
  "audioUrl": "Music/Audio/Electronic/gym-workout-trap-99526.mp3",
  "audioFileName": "gym-workout-trap-99526.mp3",
  "thumbUrl": "",
  "thumbFileName": "",
  "visualizerSource": {
    "contentVariable": "",
    "contentFunction": "mediump vec2 distort(mediump vec2 p, mediump float power)\n{\n    mediump float a  = atan(p.y, p.x);\n    mediump float r = length(p);\n    r = pow(r, power);\n    return vec2(r * cos(a), r*sin(a));\n}",
    "contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    mediump float bass = texture2D( iChannel0, vec2(0, 0) ).x;\n    uv = distort(uv*2.0-1.0, 0.5+bass)*0.5+0.5;\n    const mediump float bands = 20.0;\n    const mediump float segs = 20.0;\n    mediump vec2 p;\n    p.x = floor(uv.x*bands)/bands;\n    p.y = floor(uv.y*segs)/segs;\n    mediump float fft  = texture2D( iChannel0, vec2(p.x,0.0) ).x;\n    mediump vec3 color = mix(vec3(0.0, 2.0, 0.0), vec3(2.0, 0.0, 0.0), sqrt(uv.y));\n    mediump float mask = (p.y < fft) ? 1.0 : 0.0;\n    mediump vec2 d = fract((uv - p)*vec2(bands, segs)) - 0.5;\n    mediump float led = smoothstep(0.5, 0.3, abs(d.x)) *\n    smoothstep(0.5, 0.3, abs(d.y));\n    mediump vec3 ledColor = led*color*mask;\n    mediump float wave = texture2D( iChannel0, vec2(uv.x, 0.4) ).x;\n    mediump vec3 waveColor = vec3(0.001, 0.01, 0.04) / abs(wave - uv.y);\n    visualizer = ledColor + waveColor;"
  },
  "particleSource": {
    "contentVariable": "#define PASS_COUNT 1\nhighp float fBrightness=2.5;\nhighp float fSteps=222.;\nhighp float fParticleSize=.015;\nhighp float fParticleLength=.5/60.;\nhighp float fMinDist=.8;\nhighp float fMaxDist=5.;\nhighp float fRepeatMin=1.;\nhighp float fRepeatMax=2.;\nhighp float fDepthFade=1.2;\nconst highp float sharpness=2.;",
    "contentFunction": "highp float Random(highp float x){\n    return fract(sin(x*123.456)*23.4567+sin(x*345.678)*45.6789+sin(x*456.789)*56.789);\n}\n\nhighp vec3 GetParticleColour(const in highp vec3 vParticlePos,const in highp float fParticleSize,const in highp vec3 vRayDir){\n    highp vec2 vNormDir=normalize(vRayDir.xy);\n    highp float d1=dot(vParticlePos.xy,vNormDir.xy)/length(vRayDir.xy);\n    highp vec3 vClosest2d=vRayDir*d1;\n\n    highp vec3 vClampedPos=vParticlePos;\n\n    vClampedPos.z=clamp(vClosest2d.z,vParticlePos.z-fParticleLength,vParticlePos.z+fParticleLength);\n\n    highp float d=dot(vClampedPos,vRayDir);\n\n    highp vec3 vClosestPos=vRayDir*d;\n\n    highp vec3 vDeltaPos=vClampedPos-vClosestPos;\n\n    highp float fClosestDist=length(vDeltaPos)/fParticleSize;\n\n    highp float fShade=clamp(1.-fClosestDist,0.,1.);\n\n    fShade=fShade*exp2(-d*fDepthFade)*fBrightness;\n\n    return vec3(fShade);\n}\n\nhighp vec3 GetParticlePos(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp float fAngle=atan(vRayDir.x,vRayDir.y);\n    highp float fAngleFraction=fract(fAngle/(3.14*2.));\n\n    highp float fSegment=floor(fAngleFraction*fSteps+fSeed)+.5-fSeed;\n    highp float fParticleAngle=fSegment/fSteps*(3.14*2.);\n\n    highp float fSegmentPos=fSegment/fSteps;\n    highp float fRadius=fMinDist+Random(fSegmentPos+fSeed)*(fMaxDist-fMinDist);\n\n    highp float tunnelZ=vRayDir.z/length(vRayDir.xy/fRadius);\n\n    tunnelZ+=fZPos;\n\n    highp float fRepeat=fRepeatMin+Random(fSegmentPos+.1+fSeed)*(fRepeatMax-fRepeatMin);\n\n    highp float fParticleZ=(ceil(tunnelZ/fRepeat)-.5)*fRepeat-fZPos;\n\n    return vec3(sin(fParticleAngle)*fRadius,cos(fParticleAngle)*fRadius,fParticleZ);\n}\n\nhighp vec3 Starfield(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp vec3 vParticlePos=GetParticlePos(vRayDir,fZPos,fSeed);\n    return GetParticleColour(vParticlePos,fParticleSize,vRayDir);\n}\n\nhighp float sharpen(highp float pix_coord){\n    highp float norm=(fract(pix_coord)-.5)*2.;\n    highp float norm2=norm*norm;\n    return floor(pix_coord)+norm*pow(norm2,sharpness)/2.+.5;\n}",
    "contentParticle": "uv = gl_FragCoord.xy/iResolution.xy;\n    highp vec2 vScreenPos=uv*2.-1.;\n    vScreenPos.x*=iResolution.x/iResolution.y;\n\n    highp vec3 vRayDir=normalize(vec3(vScreenPos,1.));\n\n    highp float fShade=0.;\n\n    highp float fZPos=5.+iTime;\n\n    fParticleLength=.00001;\n\n    highp float fSeed=0.;\n\n    highp vec3 vResult=mix(vec3(0.),vec3(0.),vRayDir.y*.5+.5);\n\n    for(highp int i=0;i<PASS_COUNT;i++){\n        vResult+=Starfield(vRayDir,fZPos,fSeed);\n        fSeed+=1.234;\n    }\n\n    particle =sqrt(vResult);"
  },
  "transitionSource": {
    "contentVariable": "",
    "contentFunction": "",
    "contentTransition": ""
  },
  "backgroundEffectId": 1,
  "thumbEffectId": 0
}