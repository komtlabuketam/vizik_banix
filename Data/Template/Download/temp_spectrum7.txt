{
  "audioUrl": "Music/Audio/HipHop/hip-hop-beat-5784.mp3",
  "audioFileName": "hip-hop-beat-5784.mp3",
  "thumbUrl": "Thumb/Download/thumb_19.png",
  "thumbFileName": "thumb_19.png",
  "visualizerSource": {
    "contentVariable": "#define CEL 64.\n#define barSize 1.0 / CEL\n#define sampleSize 0.2\n#define R iResolution.xy\n#define TWO_PI (acos(-1.) * 2.)",
    "contentFunction": "mediump vec3 palette( in mediump float t, in mediump vec3 a, in mediump vec3 b, in mediump vec3 c, in mediump vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}",
    "contentVisualizer": "uv = (gl_FragCoord.xy -.5 * R)/R.x;\n    mediump vec2 uv2  = 1. - 2. * gl_FragCoord.xy / R;\n    mediump vec2 st = uv;\n    mediump float a = TWO_PI / 8. * cos(length(st)) * 20.;\n    uv *= mat2(cos(a), -sin(a), sin(a), cos(a));\n    mediump vec2 pol = vec2(atan(uv.x, uv.y), length(uv));\n    mediump float alfa = pol.x / TWO_PI + .5;\n\n    uv = vec2(alfa , pol.y);\n\n    // SPECTRUM\n    mediump float barStart = floor(uv.x * CEL) / CEL;\n    mediump float amp = .0;\n    amp -= texture2D(iChannel0,vec2(400.,0.),0.).x;\n\n    mediump float intensity = .0;\n\n    for(mediump float i = 0.0; i < barSize; i += barSize * sampleSize){\n        intensity += .9 * texture2D(iChannel0, vec2(barStart + i, 0.)).r;\n    }\n\n    intensity *= sampleSize;\n    intensity  = clamp(intensity + .1, 0.29, 1.);\n    mediump float height  = smoothstep(.0,.005, intensity - uv.y * 3.);\n\n    mediump vec3 pal = palette(intensity -.2,\n    vec3(.5, .5, .0),\n    vec3(.5,.5,.35),\n    vec3(.9,.5,.3),\n    vec3(vec2(intensity * length(uv) + uv.y), 1.));\n\n    mediump vec4 spectrum =  vec4(clamp(pal, .0,1.) * height, 1.);\n    mediump float lines  = smoothstep(.2, .4, .85*length(fract(uv.x * CEL)-.5));\n    mediump float center = 1.- smoothstep(.09, .091, length(st));\n    mediump float c0     = 1.- smoothstep(.082, .083, length(st));\n    mediump vec4 bg = vec4(.0,.0,.0, 1.);\n    bg      += .23 * smoothstep(.03,.0,length(st));\n    mediump float lns = smoothstep(.5,.51,length(fract(pol.y*250.)));\n    bg -= length(pol.y*.1) * lns;\n    bg += .05 * length( (st.y + .08)* 30.) * c0;\n    mediump vec4 col = min(vec4(spectrum),vec4(spectrum) - (lines + center)) ;\n    col = mix( clamp(bg, .0,1.), clamp(3. * col, .0,1.), 1.);\n    visualizer = col.rgb;"
  },
  "particleSource": {
    "contentVariable": "#define ANIMATION_SPEED 1.5\n#define MOVEMENT_SPEED 1.0\n#define MOVEMENT_DIRECTION vec2(-0.7, 1.0)\n\n#define PARTICLE_SIZE 0.005\n\n#define PARTICLE_SCALE (vec2(0.5, 1.6))\n#define PARTICLE_SCALE_VAR (vec2(0.25, 0.2))\n\n#define PARTICLE_BLOOM_SCALE (vec2(0.5, 0.8))\n#define PARTICLE_BLOOM_SCALE_VAR (vec2(0.3, 0.1))\n\n#define SPARK_COLOR vec3(1.0, 1.0, 1.0) * 1.5\n#define BLOOM_COLOR vec3(1.0, 0.4, 0.05) * 0.8\n#define SMOKE_COLOR vec3(1.0, 0.43, 0.1) * 0.8\n\n#define SIZE_MOD 1.05\n#define ALPHA_MOD 0.9\n#define LAYERS_COUNT 1",
    "contentFunction": "highp float hash1_2(in highp vec2 x){\n    return fract(sin(dot(x, vec2(52.127, 61.2871))) * 521.582);\n}\n\nhighp vec2 hash2_2(in highp vec2 x){\n    return fract(sin(x * mat2(20.52, 24.1994, 70.291, 80.171)) * 492.194);\n}\n\n//Simple interpolated noise\nhighp vec2 noise2_2(highp vec2 uv)\n{\n    //vec2 f = fract(uv);\n    highp vec2 f = smoothstep(0.0, 1.0, fract(uv));\n\n    highp vec2 uv00 = floor(uv);\n    highp vec2 uv01 = uv00 + vec2(0,1);\n    highp vec2 uv10 = uv00 + vec2(1,0);\n    highp vec2 uv11 = uv00 + 1.0;\n    highp vec2 v00 = hash2_2(uv00);\n    highp vec2 v01 = hash2_2(uv01);\n    highp vec2 v10 = hash2_2(uv10);\n    highp vec2 v11 = hash2_2(uv11);\n\n    highp vec2 v0 = mix(v00, v01, f.y);\n    highp vec2 v1 = mix(v10, v11, f.y);\n    highp vec2 v = mix(v0, v1, f.x);\n\n    return v;\n}\n\n//Simple interpolated noise\nhighp float noise1_2(in highp vec2 uv)\n{\n    highp vec2 f = fract(uv);\n    //vec2 f = smoothstep(0.0, 1.0, fract(uv));\n\n    highp vec2 uv00 = floor(uv);\n    highp vec2 uv01 = uv00 + vec2(0,1);\n    highp vec2 uv10 = uv00 + vec2(1,0);\n    highp vec2 uv11 = uv00 + 1.0;\n\n    highp float v00 = hash1_2(uv00);\n    highp float v01 = hash1_2(uv01);\n    highp float v10 = hash1_2(uv10);\n    highp float v11 = hash1_2(uv11);\n\n    highp float v0 = mix(v00, v01, f.y);\n    highp float v1 = mix(v10, v11, f.y);\n    highp float v = mix(v0, v1, f.x);\n\n    return v;\n}\n//Rotates point around 0,0\nhighp vec2 rotate(in highp vec2 point, in highp float deg){\n    highp float s = sin(deg);\n    highp float c = cos(deg);\n    return mat2(s, c, -c, s) * point;\n}\n\n//Cell center from point on the grid\nhighp vec2 voronoiPointFromRoot(in highp vec2 root, in highp float deg){\n    highp vec2 point = hash2_2(root) - 0.5;\n    highp float s = sin(deg);\n    highp float c = cos(deg);\n    point = mat2(s, c, -c, s) * point * 0.66;\n    point += root + 0.5;\n    return point;\n}\n\n//Voronoi cell point rotation degrees\nhighp float degFromRootUV(in highp vec2 uv){\n    return iTime * ANIMATION_SPEED * (hash1_2(uv) - 0.5) * 2.0;\n}\n\nhighp vec2 randomAround2_2(in highp vec2 point, in highp vec2 range, in highp vec2 uv){\n    return point + (hash2_2(uv) - 0.5) * range;\n}\n\n\nhighp vec3 fireParticles(in highp vec2 uv, in highp vec2 originalUV){\n    highp vec3 particles = vec3(0.0);\n    highp vec2 rootUV = floor(uv);\n    highp float deg = degFromRootUV(rootUV);\n    highp vec2 pointUV = voronoiPointFromRoot(rootUV, deg);\n    highp float dist = 2.0;\n    highp float distBloom = 0.0;\n\n    //UV manipulation for the faster particle movement\n    highp vec2 tempUV = uv + (noise2_2(uv * 2.0) - 0.5) * 0.1;\n    tempUV += -(noise2_2(uv * 3.0 + iTime) - 0.5) * 0.07;\n    //Sparks sdf\n    dist = length(rotate(tempUV - pointUV, 0.7) * randomAround2_2(PARTICLE_SCALE, PARTICLE_SCALE_VAR, rootUV));\n    //Add sparks\n    particles += (1.0 - smoothstep(PARTICLE_SIZE * 0.6, PARTICLE_SIZE * 3.0, dist)) * SPARK_COLOR;\n    //Upper disappear curve randomization\n    highp float border = (hash1_2(rootUV) - 0.5) * 2.0;\n    highp float disappear = 1.0 - smoothstep(border, border + 0.5, originalUV.y);\n\n    //Lower appear curve randomization\n    border = (hash1_2(rootUV + 0.214) - 1.8) * 0.7;\n    highp float appear = smoothstep(border, border + 0.4, originalUV.y);\n\n    return particles * disappear * appear;\n}\n\n\n//Layering particles to imitate 3D view\nhighp vec3 layeredParticles(in highp vec2 uv, in highp float sizeMod, in highp float alphaMod, in highp int layers){\n    highp vec3 particles = vec3(0);\n    highp float size = 1.0;\n    highp float alpha = 1.0;\n    highp vec2 offset = vec2(0.0);\n    highp vec2 noiseOffset;\n    highp vec2 bokehUV;\n\n    for (highp int i = 0; i < layers; i++){\n        //Particle noise movement\n        noiseOffset = (noise2_2(uv * size * 2.0 + 0.5) - 0.5) * 0.15;\n        //UV with applied movement\n        bokehUV = (uv * size + iTime * MOVEMENT_DIRECTION * MOVEMENT_SPEED) + offset + noiseOffset;\n        //Adding particles\t\t\t\t\t\t\t\tif there is more smoke, remove smaller particles\n        particles += fireParticles(bokehUV, uv) * alpha * (1.0 - smoothstep(0.0, 1.0, 0.) * (float(i) / float(layers)));\n        //Moving uv origin to avoid generating the same particles\n        offset += hash2_2(vec2(alpha, alpha)) * 10.0;\n        alpha *= alphaMod;\n        size *= sizeMod;\n    }\n    return particles;\n}",
    "contentParticle": "uv = (2.0 * gl_FragCoord.xy - iResolution.xy) / iResolution.x;\n    uv *= 1.8;\n    particle = layeredParticles(uv, SIZE_MOD, ALPHA_MOD, LAYERS_COUNT);"
  },
  "transitionSource": {
    "contentVariable": "mediump float freq = 4.0;\nmediump float period = 8.0;\nmediump float speed = 2.0;\nmediump float fade = 4.0;\nmediump float displacement = 0.2;",
    "contentFunction": "",
    "contentTransition": "mediump vec2 U = ((2. * gl_FragCoord.xy) - iResolution.xy) / min(iResolution.x, iResolution.y);\n        mediump float D = length(U);\n        mediump float progress = 3.1 * translatePercent;\n        mediump float frame_time = mod(progress * speed, period);\n        mediump float pixel_time = max(0.0, frame_time - D);\n        mediump float wave_height = (cos(pixel_time * freq) + 1.0) / 2.0;\n        mediump float wave_scale = (1.0 - min(1.0, pixel_time / fade));\n        mediump float frac = wave_height * wave_scale;\n        if (mod(progress * speed, period * 2.0) > period){\n            frac = 1. - frac;\n        }\n        mediump vec2 tc = uv + ((U / D) * -((sin(pixel_time * freq) / fade) * wave_scale) * displacement);\n        background = mix(texture2D(iChannel3, tc), texture2D(iChannel1, tc), frac).rgb;"
  },
  "backgroundEffectId":1 ,
  "thumbEffectId":0
}