{
  "audioUrl": "Music/Audio/HipHop/powerful-advertising-trap-15884.mp3",
  "audioFileName": "powerful-advertising-trap-15884.mp3",
  "thumbUrl": "",
  "thumbFileName": "",
  "visualizerSource": {
    "contentVariable": "",
    "contentFunction": "mediump vec3 pal(in mediump float t, in mediump vec3 a, in mediump vec3 b, in mediump vec3 c, in mediump vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmediump float sdBox( in mediump vec2 p, in mediump vec2 b ){\n    mediump vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}",
    "contentVisualizer": "uv = (gl_FragCoord.xy - 0. * iResolution.xy) / iResolution.xy;\n    mediump float res = iResolution.x/ iResolution.y;\n    mediump float drop = clamp(iTime / 11., 0., 1.); step(iTime, 5.); // changed music so doesnt work as well now\n    drop = smoothstep(0., 1., drop);\n    mediump float sc = 50.;\n    mediump float ix = floor(sc * uv.x) / sc;\n    mediump float fx = fract(sc * uv.x) - 0.5;\n    mediump float r = texture2D( iChannel0, vec2(ix, uv.y * 0.)).r;\n    mediump float t = texture2D(iChannel0, vec2(0.25,0)).r; // doesnt change very smoothly\n    fx += (0.1 + 0.1 * t) * cos(sc * uv.y * r + 0.12 * r * iTime);\n    mediump float d = sdBox(vec2(fx, uv.y), vec2(0.4 - 0.3 * r, r));\n    d = min(d, length(vec2(fx, (uv.y-r) *sc / res)) - 0.4 + 0.3 * r);\n    mediump float k = 80. * r / iResolution.y;\n    mediump float s = smoothstep(-k, k, -d);\n    mediump vec3 e = vec3(0.5);\n    visualizer = s * pal(0.5 * t + r - 0.5 * exp(-2.5 * uv.y) + 1.5, e, e, e, drop * (0.5 * t) * vec3(0,1,2)/3.);"
  },
  "particleSource": {
    "contentVariable": "#define PASS_COUNT 1\nhighp float fBrightness=2.5;\nhighp float fSteps=222.;\nhighp float fParticleSize=.015;\nhighp float fParticleLength=.5/60.;\nhighp float fMinDist=.8;\nhighp float fMaxDist=5.;\nhighp float fRepeatMin=1.;\nhighp float fRepeatMax=2.;\nhighp float fDepthFade=1.2;\nconst highp float sharpness=2.;",
    "contentFunction": "highp float Random(highp float x){\n    return fract(sin(x*123.456)*23.4567+sin(x*345.678)*45.6789+sin(x*456.789)*56.789);\n}\n\nhighp vec3 GetParticleColour(const in highp vec3 vParticlePos,const in highp float fParticleSize,const in highp vec3 vRayDir){\n    highp vec2 vNormDir=normalize(vRayDir.xy);\n    highp float d1=dot(vParticlePos.xy,vNormDir.xy)/length(vRayDir.xy);\n    highp vec3 vClosest2d=vRayDir*d1;\n\n    highp vec3 vClampedPos=vParticlePos;\n\n    vClampedPos.z=clamp(vClosest2d.z,vParticlePos.z-fParticleLength,vParticlePos.z+fParticleLength);\n\n    highp float d=dot(vClampedPos,vRayDir);\n\n    highp vec3 vClosestPos=vRayDir*d;\n\n    highp vec3 vDeltaPos=vClampedPos-vClosestPos;\n\n    highp float fClosestDist=length(vDeltaPos)/fParticleSize;\n\n    highp float fShade=clamp(1.-fClosestDist,0.,1.);\n\n    fShade=fShade*exp2(-d*fDepthFade)*fBrightness;\n\n    return vec3(fShade);\n}\n\nhighp vec3 GetParticlePos(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp float fAngle=atan(vRayDir.x,vRayDir.y);\n    highp float fAngleFraction=fract(fAngle/(3.14*2.));\n\n    highp float fSegment=floor(fAngleFraction*fSteps+fSeed)+.5-fSeed;\n    highp float fParticleAngle=fSegment/fSteps*(3.14*2.);\n\n    highp float fSegmentPos=fSegment/fSteps;\n    highp float fRadius=fMinDist+Random(fSegmentPos+fSeed)*(fMaxDist-fMinDist);\n\n    highp float tunnelZ=vRayDir.z/length(vRayDir.xy/fRadius);\n\n    tunnelZ+=fZPos;\n\n    highp float fRepeat=fRepeatMin+Random(fSegmentPos+.1+fSeed)*(fRepeatMax-fRepeatMin);\n\n    highp float fParticleZ=(ceil(tunnelZ/fRepeat)-.5)*fRepeat-fZPos;\n\n    return vec3(sin(fParticleAngle)*fRadius,cos(fParticleAngle)*fRadius,fParticleZ);\n}\n\nhighp vec3 Starfield(const in highp vec3 vRayDir,const in highp float fZPos,const in highp float fSeed){\n    highp vec3 vParticlePos=GetParticlePos(vRayDir,fZPos,fSeed);\n    return GetParticleColour(vParticlePos,fParticleSize,vRayDir);\n}\n\nhighp float sharpen(highp float pix_coord){\n    highp float norm=(fract(pix_coord)-.5)*2.;\n    highp float norm2=norm*norm;\n    return floor(pix_coord)+norm*pow(norm2,sharpness)/2.+.5;\n}",
    "contentParticle": "uv = gl_FragCoord.xy/iResolution.xy;\n    highp vec2 vScreenPos=uv*2.-1.;\n    vScreenPos.x*=iResolution.x/iResolution.y;\n\n    highp vec3 vRayDir=normalize(vec3(vScreenPos,1.));\n\n    highp float fShade=0.;\n\n    highp float fZPos=5.+iTime;\n\n    fParticleLength=.00001;\n\n    highp float fSeed=0.;\n\n    highp vec3 vResult=mix(vec3(0.),vec3(0.),vRayDir.y*.5+.5);\n\n    for(highp int i=0;i<PASS_COUNT;i++){\n        vResult+=Starfield(vRayDir,fZPos,fSeed);\n        fSeed+=1.234;\n    }\n\n    particle =sqrt(vResult);"
  },
  "transitionSource": {
    "contentVariable": "",
    "contentFunction": "mediump vec4 rule(mediump vec2 coord){\n    mediump vec2 uv2 = coord-vec2(0.5,0.5);\n    mediump float angle = atan(uv2.y, uv2.x);\n    mediump float c = angle/2.0/3.1416+0.5;\n    return vec4(c,c,c,1);\n}",
    "contentTransition": "mediump vec4 src = texture2D(iChannel1, uv);\n        mediump vec4 dst = texture2D(iChannel3, uv);\n        mediump vec4 white = vec4(1.0);\n        mediump float rule = rule(uv).g;\n        mediump float vague=0.1;\n        mediump float delay=0.05;\n        mediump float phase=translatePercent*(1.0+vague+delay);\n        mediump float p0=smoothstep(rule, rule+vague, phase);\n        mediump float p1=smoothstep(rule+delay, rule+vague+delay, phase);\n        mediump vec4 result = src*(1.0-p0)+white*(p0-p1)+dst*p1;\n        background = result.rgb;"
  },
  "backgroundEffectId": 1,
  "thumbEffectId":0
}