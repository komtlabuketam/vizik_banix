{"id": 13, "style": "Spectrum", "contentVariable": "", "contentFunction": "mediump float rand(mediump vec3 pos) {\n    pos = pos + vec3(2.35219, 1.51092, 3.01246);\n    mediump vec2 pos2d = pos.xy*1.0231 + pos.yz*1.7423 + pos.xz*0.9854;\n    mediump float rand = fract(sin(dot(pos2d, vec2(12.9898, 78.233))) * 43758.5453123);\n    rand = rand - floor(rand);\n    return rand;\n}\n\nmediump float noise(mediump vec3 pos, mediump int octaves) {\n    mediump float total = 0.0;\n    mediump float multiplier = 0.0;\n    for (mediump int o = 1; o <= octaves; o++) {\n        mediump vec3 lin = pos/float(o);\n        lin -= floor(lin);\n\n        mediump float lll = rand(vec3( floor(pos.x/float(o)),     floor(pos.y/float(o)),     floor(pos.z/float(o)) ));\n        mediump float llh = rand(vec3( floor(pos.x/float(o)),     floor(pos.y/float(o)),     floor(pos.z/float(o))+1.0 ));\n        mediump float llz = lll * (1.0 - lin.z) + llh * lin.z;\n        mediump float lhl = rand(vec3( floor(pos.x/float(o)),     floor(pos.y/float(o))+1.0, floor(pos.z/float(o)) ));\n        mediump float lhh = rand(vec3( floor(pos.x/float(o)),     floor(pos.y/float(o))+1.0, floor(pos.z/float(o))+1.0 ));\n        mediump float lhz = lhl * (1.0 - lin.z) + lhh * lin.z;\n        mediump float lyz = llz * (1.0 - lin.y) + lhz * lin.y;\n\n        mediump float hll = rand(vec3( floor(pos.x/float(o))+1.0, floor(pos.y/float(o)),     floor(pos.z/float(o)) ));\n        mediump float hlh = rand(vec3( floor(pos.x/float(o))+1.0, floor(pos.y/float(o)),     floor(pos.z/float(o))+1.0 ));\n        mediump float hlz = hll * (1.0 - lin.z) + hlh * lin.z;\n        mediump float hhl = rand(vec3( floor(pos.x/float(o))+1.0, floor(pos.y/float(o))+1.0, floor(pos.z/float(o)) ));\n        mediump float hhh = rand(vec3( floor(pos.x/float(o))+1.0, floor(pos.y/float(o))+1.0, floor(pos.z/float(o))+1.0 ));\n        mediump float hhz = hhl * (1.0 - lin.z) + hhh * lin.z;\n        mediump float hyz = hlz * (1.0 - lin.y) + hhz * lin.y;\n\n        mediump float val = lyz * (1.0 - lin.x) + hyz * lin.x;\n        multiplier = multiplier + float(o);\n        total = total + val * float(o);\n    }\n    return total/multiplier;\n}", "contentVisualizer": "uv = gl_FragCoord.xy/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    mediump float PI = 3.1415926535;\n    const mediump vec3 colour = vec3(166.0/255.0, 235.0/255.0, 107.0/255.0);\n    mediump float valueB = noise(vec3(uv*45.0, iTime*4.0), 6)*0.4+0.6;\n    mediump float valueS = noise(vec3(uv*45.0, iTime*5.0+10.0), 6)*0.8;\n    mediump vec3 col = colour*valueB + (1.0-colour)*valueS*valueB;\n\n    mediump float pos = atan(uv.y/abs(uv.x))/PI + 0.5;\n    mediump float vol = texture2D(iChannel0, vec2(pos, 0.0)).x*(pos*0.3+0.1)*5.0;\n\n    mediump float dist = sqrt(uv.x*uv.x + uv.y*uv.y);\n    mediump float shadow = dist - (vol*0.2+0.3);\n    mediump vec4 result;\n    if (dist <= 0.25) {\n        shadow = 0.25 - dist;\n    }\n    if (shadow < 0.0) {\n        result = vec4(col, 1.0);\n    } else {\n        shadow = 1.0-shadow;\n        shadow *= 0.8;\n        shadow *= shadow;\n        shadow *= shadow;\n        shadow -= 0.2;\n        result = vec4(shadow, shadow, shadow, 1.0);\n    }\n    visualizer = result.rgb;"}