{"id": 6,"style": "Spectrum","contentVariable": "","contentFunction": "","contentVisualizer": "mediump float RADIUS_MIN = min(iResolution.x, iResolution.y)/ 6.0;\n    mediump float RADIUS_MAX = min(iResolution.x, iResolution.y)/ 4.0;\n    uv = vec2(iResolution.x / 2.0, iResolution.y / 2.0);\n    mediump vec2 vecPix = uv - gl_FragCoord.xy;\n    mediump vec2 normVecPix = normalize(vecPix);\n    mediump vec2 normVecRef = normalize(uv - vec2(0.0, uv.y));\n\n    mediump float cosAngle = dot(normVecPix, normVecRef);\n    mediump float angle = (degrees(acos(cosAngle)) + 360.0) / 1080.0;\n    mediump float value = texture2D(iChannel0, vec2(angle, 0.0)).x;\n    value = value * 100.0;\n    mediump vec4 result;\n    mediump float vecLength = length(vecPix);\n    if (vecLength > RADIUS_MIN + value && vecLength < RADIUS_MAX + value){\n        mediump vec4 color = vec4(1.0);\n        for (mediump float i = RADIUS_MIN; i < RADIUS_MAX; i += 1.0){\n            if (vecLength > i + value && vecLength < (i + 1.0) + value){\n                mediump float intensity = (i - RADIUS_MIN) / (RADIUS_MAX - RADIUS_MIN);\n                color -= vec4(intensity);\n            }\n        }\n        result = color * vec4(0.40, 0.50, 0.90, 0.0);\n    } else {\n        result = vec4(0.0);\n    }\n    visualizer = vec3(result);"}