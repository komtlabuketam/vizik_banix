{"id": 16, "style": "Spectrum", "contentVariable": "#define BEATMOVE 1\nconst mediump float FREQ_RANGE = 128.0;\nconst mediump float RADIUS = 0.5;\nconst mediump float BRIGHTNESS = 0.15;\nconst mediump float SPEED = 0.5;", "contentFunction": "mediump vec3 hsv2rgb(mediump vec3 color){\n    mediump vec4 konvert = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    mediump vec3 calc = abs(fract(color.xxx + konvert.xyz) * 6.0 - konvert.www);\n    return color.z * mix(konvert.xxx, clamp(calc - konvert.xxx, 0.0, 1.0), color.y);\n}\n\nmediump float luma(mediump vec3 color) {\n    return dot(color, vec3(0.299, 0.587, 0.5));\n}\n\nmediump float getFrequency(mediump float x) {\n    return texture2D(iChannel0, vec2(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE, 0.25)).x + 0.06;\n}\n\nmediump float getFrequency_smooth(mediump float x) {\n    mediump float index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n    mediump float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n    return mix(getFrequency(index), getFrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));\n}\n\nmediump float getFrequency_blend(mediump float x) {\n    return mix(getFrequency(x), getFrequency_smooth(x), 0.5);\n}\n\nmediump vec3 circleIllumination(mediump vec2 fragment, mediump float radius) {\n    mediump float distance = length(fragment);\n    mediump float ring = 1.0 / abs(distance - radius - (getFrequency_smooth(0.0)/4.50));\n    mediump vec3 color = vec3(0.0);\n    mediump float angle = atan(fragment.x, fragment.y);\n    color += hsv2rgb( vec3( ( angle + iTime * 2.5 ) / (PI * 2.0), 1.0, 1.0 ) ) * ring * BRIGHTNESS;\n    mediump float frequency = max(getFrequency_blend(abs(angle / PI)) - 0.02, 0.0);\n    color *= frequency;\n    return color;\n}\n\nmediump vec3 doLine(mediump vec2 fragment, mediump float radius, mediump float x) {\n    mediump vec3 col = hsv2rgb(vec3(x * 0.23 + iTime * 0.12, 1.0, 1.0));\n\n    mediump float freq = abs(fragment.x * 0.5);\n\n    col *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getFrequency(freq);\n    col = col * smoothstep(radius, radius * 1.8, abs(fragment.x));\n\n    return col;\n}", "contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    visualizer += circleIllumination(uv, RADIUS);\n\n    mediump float c = cos(iTime * SPEED);\n    mediump float s = sin(iTime * SPEED);\n    mediump vec2 rot = mat2(c,s,-s,c) * uv;\n    visualizer += doLine(rot, (RADIUS ), rot.x);\n\n    mediump float c1 = sin(iTime * SPEED);\n    mediump float s1 = cos(iTime * SPEED);\n    mediump vec2 rot1 = mat2(c1,s1,-s1,c1) * uv;\n    visualizer += doLine(rot1, (RADIUS ), rot1.y);\n\n    visualizer += max(luma(visualizer) - 1.0, 0.0);"}