{"id": 10, "style": "Magic", "contentVariable": "#define DUST_MOTE_COUNT 10", "contentFunction": "mediump float audio_freq(in sampler2D channel, in mediump float f) { return texture2D(channel, vec2(f, 0.25)).x; }\nmediump float audio_ampl(in sampler2D channel, in mediump float t) { return texture2D(channel, vec2(t, 0.45)).x; }\n\nmediump vec3 dust_mote(mediump vec3 color, mediump vec2 pos, mediump vec2 center, mediump float radius, mediump float alpha, mediump float focus){\n    mediump vec2 disp = pos - center;\n    mediump float dist = dot(disp, disp);\n    mediump vec3 mote = (color+0.005)*alpha* vec3(smoothstep(radius * (1.0+focus), radius, dist));\n    return (1.0-mote)*color + mote;\n}\n\nmediump float rnd(mediump float s) { return sin(2923.138674*s); }\n\nmediump vec3 dust_motes(mediump vec3 color, mediump vec2 pos, const mediump int number, mediump float t) {\n    mediump vec3 new_color = color;\n    for (mediump int i = 0; i < DUST_MOTE_COUNT; i++) {\n        mediump float fudge = rnd(float(i));\n        mediump float cycle = fract(t+fudge);\n        mediump float fade = 2.0 * cycle * (1.0 - cycle);\n        mediump vec2 center = vec2(fudge+sin(t*fudge+fudge), 1.1-cycle*2.0+rnd(fudge));\n        new_color = dust_mote(new_color, pos, center, 0.01+0.007*fudge, 0.5*fade, 0.6 + 0.4*fudge);\n    }\n    return new_color;\n}\n\nmediump vec3 B2_spline(mediump vec3 x) {\n    mediump vec3 t = 3.0 * x;\n    mediump vec3 b0 = step(0.0, t)     * step(0.0, 1.0-t);\n    mediump vec3 b1 = step(0.0, t-1.0) * step(0.0, 2.0-t);\n    mediump vec3 b2 = step(0.0, t-2.0) * step(0.0, 3.0-t);\n    return 0.5 * (\n    b0 * pow(t, vec3(2.0)) +\n    b1 * (-2.0*pow(t, vec3(2.0)) + 6.0*t - 3.0) +\n    b2 * pow(3.0-t, vec3(2.0))\n    );\n}", "contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    mediump vec2 centered = (uv - 0.5)/1.0;\n    mediump float sample0 = audio_ampl(iChannel0, 0.02);\n    centered /= 1.0 + 0.03*(sample0-0.5);\n    centered.x *= 0.97 + 0.01*(1.0 + cos(iTime));\n    mediump float mirrored = abs(centered.x);\n    centered.x *= iResolution.x / iResolution.y;\n\n    mediump float dist2 = dot(centered, centered);\n    mediump float clamped_dist = smoothstep(0.0, 1.0, dist2);\n    mediump float arclength    = abs(atan(centered.y, centered.x) / radians(360.0))+0.01;\n    mediump float shine_shift = 0.15-centered.y;\n\n    mediump float sample1 = audio_freq(iChannel0, mirrored + 0.01);\n    mediump float sample2 = audio_ampl(iChannel0, clamped_dist);\n    mediump float sample3 = audio_ampl(iChannel0, arclength);\n    mediump float sample4 = audio_freq(iChannel0, 0.01+.05*mirrored/(shine_shift));\n\n    mediump float t = iTime / 100.0;\n    mediump float polychrome = 1.0;\n    mediump vec3 spline_args = fract(vec3(polychrome*uv.x-t) + vec3(0.0, -1.0/3.0, -2.0/3.0));\n    mediump vec3 spline = B2_spline(spline_args);\n\n    mediump float f = abs(centered.y);\n    mediump vec3 base_color  = vec3(1.0, 1.0, 1.0) - f*spline;\n    mediump vec3 flame_color = pow(base_color, vec3(3.0));\n    mediump vec3 disc_color  = 0.20 * base_color;\n    mediump vec3 wave_color  = 0.10 * base_color;\n    mediump vec3 flash_color = 0.05 * base_color;\n\n    mediump float disp_dist = smoothstep(-0.2, -0.1, sample3-dist2);\n    disp_dist *= (1.0 - disp_dist);\n\n    mediump float v = abs(centered.y);\n    visualizer += flame_color * smoothstep(v, v*8.0, sample1);\n    visualizer += disc_color  * smoothstep(0.5, 1.0, sample2) * (1.0 - clamped_dist);\n    visualizer += flash_color * smoothstep(0.5, 1.0, sample3) * clamped_dist;\n    visualizer += wave_color  * disp_dist;\n    visualizer = dust_motes(visualizer, centered+sample0*0.03-0.06, 10, t*10.0);\n    visualizer = pow(visualizer, vec3(0.4545));"}