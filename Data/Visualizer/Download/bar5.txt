{"id": 5, "style": "Bar", "contentVariable": "", "contentFunction": "mediump float noise3D(mediump vec3 p){\n    return fract(sin(dot(p ,vec3(12.9898,78.233,12.7378))) * 43758.5453)*2.0-1.0;\n}\n\nmediump vec3 mixc(mediump vec3 col1, mediump vec3 col2, mediump float v){\n    v = clamp(v,0.0,1.0);\n    return col1+v*(col2-col1);\n}\n\nmediump vec3 drawBands(mediump vec2 uv){\n    const mediump float PI =3.14159265359;\n    const mediump int NUM_BANDS = 24;\n    uv = 2.0*uv-1.0;\n    uv.x*=iResolution.x/iResolution.y;\n    uv = vec2(length(uv), atan(uv.y,uv.x));\n    uv.y -= PI*0.5;\n    mediump vec2 uv2 = vec2(uv.x, uv.y*-1.0);\n    uv.y = mod(uv.y,PI*2.0);\n    uv2.y = mod(uv2.y,PI*2.0);\n\n    mediump vec3 col = vec3(0.0);\n    mediump vec3 col2 = vec3(0.0);\n\n    mediump float nBands = float(NUM_BANDS);\n    mediump float i = floor(uv.x*nBands);\n    mediump float f = fract(uv.x*nBands);\n    mediump float band = i/nBands;\n    mediump float s;\n\n    band = 1.0-band;\n\n    //cubic easing\n    band *= band*band;\n\n    band = band*0.99;\n    band += 0.01;\n\n    s = texture2D(iChannel0, vec2(band,0.25) ).x;\n\n    if(band<0.0||band>=1.0){\n        s = 0.0;\n    }\n\n    /* Gradient colors and amount here */\n    const int nColors = 4;\n    mediump vec3 colors[nColors];\n    colors[0] = vec3(0.05,0.05,1.0);\n    colors[1] = vec3(0.05,1.00,1.00);\n    colors[2] = vec3(0.50,1.00,0.25);\n    colors[3] = vec3(1.00,0.75,0.25);\n\n    mediump vec3 gradCol = colors[0];\n    mediump float n = float(nColors)-1.0;\n    for(mediump int i = 1; i < nColors; i++){\n        gradCol = mixc(gradCol,colors[i],(s-float(i-1)/n)*n);\n    }\n\n    mediump float h = PI*0.5;\n\n    col += vec3(1.0-smoothstep(-0.5,0.0,uv.y-s*h));\n    col *= gradCol;\n\n    col2 += vec3(1.0-smoothstep(-0.5,0.0,uv2.y-s*h));\n    col2*= gradCol;\n\n    col = mix(col,col2,step(0.0,uv.y-PI));\n\n    col *= smoothstep(0.125,0.375,f);\n    col *= smoothstep(0.875,0.625,f);\n\n    col = clamp(col,0.0,1.0);\n\n    return col;\n}", "contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    mediump vec2 p = vec2(uv.x, uv.y+0.2);\n    visualizer += drawBands(p);\n    mediump vec3 ref = vec3(0.0);\n    mediump vec2 eps = vec2(0.0025,-0.0025);\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.xx);\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.xy);\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.yy);\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.yx);\n    ref += drawBands(vec2(p.x+eps.x,1.0-p.y));\n    ref += drawBands(vec2(p.x+eps.y,1.0-p.y));\n    ref += drawBands(vec2(p.x,1.0-p.y+eps.x));\n    ref += drawBands(vec2(p.x,1.0-p.y+eps.y));\n    ref /= 8.0;\n    mediump float colStep = length(smoothstep(0.0,0.1,visualizer));\n    mediump vec3 cs1 = drawBands(vec2(0.5,0.51));\n    mediump vec3 cs2 = drawBands(vec2(0.5,0.93));\n    mediump vec3 plCol = mix(cs1,cs2,length(p*2.0-1.0))*0.15*smoothstep(0.75,-0.25,length(p*2.0-1.0));\n    mediump vec3 plColBg = vec3(0.05)*smoothstep(1.0,0.0,length(p*2.0-1.0));\n    mediump vec3 pl = (plCol+plColBg)*smoothstep(0.5,0.65,1.0-uv.y);\n    visualizer += clamp(pl*(1.0-colStep),0.0,1.0);\n    visualizer += ref*smoothstep(0.125,1.6125,p.y);\n    visualizer = clamp(visualizer, 0.0, 1.0);\n    mediump float dither = noise3D(vec3(uv,iTime))*2.0/256.0;\n    visualizer += dither;"}