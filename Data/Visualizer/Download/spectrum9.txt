{"id": 9, "style": "Spectrum", "contentVariable": "#define SCALE_REACTIVENESS 0.5\n    #define FREQUENCY_REACTIVENESS 1.0\n    #define HIGHS_MULTIPLIER 1.5\n    #define SPECTRUM_SCALE 1.0", "contentFunction": "mediump float getFrequencies(in mediump vec2 uv){\n    return texture2D(iChannel0, vec2(uv.x, 0.25)).r;\n}\n\nmediump float getLowEnd(){\n    return texture2D(iChannel0, vec2(0.2, 0.25)).r;\n}\n\nmediump vec3 getCircleColor(in mediump vec2 st){\n    mediump float xCol = (st.x - (iTime / 13.0)) * 3.0;\n    xCol = mod(xCol, 3.0);\n    mediump vec3 color = vec3(0.25, 0.25, 0.25);\n    if (xCol < 1.0) {\n        color.g += 1.0 - xCol;\n        color.b += xCol;\n    } else if (xCol < 2.0) {\n        xCol -= 1.0;\n        color.b += 1.0 - xCol;\n        color.r += xCol;\n    } else {\n        xCol -= 2.0;\n        color.r += 1.0 - xCol;\n        color.g += xCol;\n    }\n    return color;\n}\n\nmediump vec3 getColorGradient(in mediump vec2 uv, mediump vec3 col1, mediump vec3 col2, mediump float speed, mediump float scale){\n    mediump vec3 col;\n    uv *= scale;\n    mediump float s = (sin((uv.x + iTime / 5.0 * speed + uv.y + cos(uv.x + (iTime / 7.0 * speed) * 3.0 + sin((uv.y + iTime * speed / 10.0) * 5.0))) * 14.0) + 1.0) / 2.0;\n    col = mix(col1, col2, s);\n    return col;\n}\n\nmediump float vignette(in mediump vec2 uv, mediump float borderStrength, mediump float strength){\n    mediump float PI =3.1415;\n    return mix(1.0, pow(sin(uv.x * PI) * sin(uv.y * PI), borderStrength), strength);\n}", "contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    mediump vec2 p = (2.0*gl_FragCoord.xy-iResolution.xy)/iResolution.y;\n    mediump float tau = 3.1415926535*2.0;\n    mediump float a = atan(p.x, p.y);\n    mediump float r = length(p) * 0.75;\n    mediump vec2 st = vec2(a/tau, r);\n    mediump float aspectRatio = iResolution.x / iResolution.y;\n    mediump vec3 spectrumColor = getCircleColor(st);\n    mediump float freq;\n    freq += getFrequencies(st / 4.0) * step(1. - uv.x, 0.5);\n    freq += getFrequencies(st / 4.0 * vec2(-1.0, 1.0)) * step(uv.x, 0.5);\n    freq = clamp(freq, 0.0, 1.0);\n    freq = pow(clamp(freq, 0.0, 1.0), 3.0);\n    mediump vec2 z = st * vec2(-1.0, 1.0);\n    mediump float freqMultiplier = pow((clamp(st.x, 0.0, 1.0) + clamp(z.x, 0.0, 1.0)) * 2.0, HIGHS_MULTIPLIER) + 0.15;\n    freq *= freqMultiplier * 4.0;\n    mediump float lowEnd = getLowEnd() * SCALE_REACTIVENESS;\n    st = ((1.85 * SPECTRUM_SCALE + lowEnd) + (freq * FREQUENCY_REACTIVENESS - 2.8) * st) - 1.0;\n    mediump float spectrum = 1.7 * abs(1.0 / (60.0 * st.y));\n    mediump float brightnessMultiplier = getLowEnd();\n    brightnessMultiplier = pow(brightnessMultiplier + 0.8, 2.5);\n    visualizer += spectrum * spectrumColor * (brightnessMultiplier + freq * FREQUENCY_REACTIVENESS);\n    visualizer *= clamp(length((uv - 0.5) * vec2(aspectRatio, 1.0)) * 4.0, 0.0, 1.0);"}