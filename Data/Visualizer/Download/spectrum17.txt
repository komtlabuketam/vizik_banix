{"id": 17, "style": "Spectrum", "contentVariable": "#define BEATMOVE 1\nconst mediump float FREQ_RANGE = 64.0;\nconst mediump float RADIUS = 0.6;\nconst mediump float BRIGHTNESS = 0.2;\nconst mediump float SPEED = 0.5;", "contentFunction": "mediump vec3 hsv2rgb(mediump vec3 c){\n    mediump vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    mediump vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmediump float luma(mediump vec3 color) {\n    return dot(color, vec3(0.0, 0.0, 0.0));\n}\n\nmediump float getfrequency(mediump float x) {\n    return texture2D(iChannel0, vec2(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE, 0.25)).x + 0.06;\n}\n\nmediump float getfrequency_smooth(mediump float x) {\n    mediump float index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n    mediump float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n    return mix(getfrequency(index), getfrequency(next), smoothstep(0.1, 1.0, fract(x * FREQ_RANGE)));\n}\n\nmediump float getfrequency_blend(mediump float x) {\n    return mix(getfrequency(x), getfrequency_smooth(x), 0.5);\n}\n\nmediump vec3 doHalo(mediump vec2 fragment, mediump float radius) {\n    mediump float dist = length(fragment);\n    mediump float ring = 2.0 / abs(dist - radius);\n\n    mediump float b = dist < radius ? BRIGHTNESS * 0.3 : BRIGHTNESS;\n\n    mediump vec3 col = vec3(0.0);\n\n    mediump float angle = atan(fragment.x, fragment.y);\n    col += hsv2rgb( vec3( ( angle + iTime * 0.9 ) / (PI * 2.0), 1.0, 1.0 ) ) * ring * b;\n\n    mediump float frequency = max(getfrequency_blend(abs(angle / PI)) - 0.001, 0.0);\n    col *= frequency;\n\n    // Black halo\n    col *= smoothstep(radius * 0.5, radius, dist);\n\n    return col;\n}\n\nmediump vec3 doLine(mediump vec2 fragment, mediump float radius, mediump float x) {\n    mediump vec3 col = hsv2rgb(vec3(x * 0.4 + iTime * 0.9, 1.0, 1.0));\n\n    mediump float freq = abs(fragment.x * 0.01);\n\n    col *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getfrequency(freq);\n    col = col * smoothstep(radius, radius * 0.01, abs(fragment.x));\n\n    return col;\n}", "contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    visualizer += doHalo(uv, RADIUS);\n\n    mediump float c = cos(iTime * SPEED);\n    mediump float s = sin(iTime * SPEED);\n    mediump vec2 rot = mat2(c,s,-s,c) * uv;\n    visualizer += doLine(rot, RADIUS, rot.x);\n\n    visualizer += max(luma(visualizer) - 1.0, 0.0);"}