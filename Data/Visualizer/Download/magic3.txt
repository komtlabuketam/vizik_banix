{"id": 3, "style": "Magic", "contentVariable": "const mediump float cos60 = cos(3.14159 / 3.);\nconst mediump float sin60 = sin(3.14159 / 3.);\nconst mediump float root3 = sqrt(3.);\nconst mediump float root3_3 = sqrt(3.) / 3.;", "contentFunction": "mediump vec2 cube_to_hex(mediump vec3 h){\n    return h.xz;\n}\n\nmediump vec3 hex_to_cube(mediump vec2 h){\n    return vec3(h.x, -h.x - h.y, h.y);\n}\n\nmediump vec3 cube_round(mediump vec3 h){\n    mediump float rx = floor(h.x +0.5);\n    mediump float ry = floor(h.y+0.5);\n    mediump float rz = floor(h.z+0.5);\n\n    mediump float x_diff = abs(rx - h.x);\n    mediump float y_diff = abs(ry - h.y);\n    mediump float z_diff = abs(rz - h.z);\n\n    if (x_diff > y_diff && x_diff > z_diff){\n        rx = -ry-rz;\n    } else if (y_diff > z_diff){\n        ry = -rx-rz;\n    } else {\n        rz = -rx-ry;\n    }\n\n    return vec3(rx, ry, rz);\n}\n\nmediump vec2 hex_round(mediump vec2 h){\n    return cube_to_hex(cube_round(hex_to_cube(h)));\n}\n\nmediump float hex_distance(mediump vec2 a, mediump vec2 b){\n    return (abs(a.x - b.x)\n    + abs(a.x + a.y - b.x - b.y)\n    + abs(a.y - b.y)) / 2.;\n}\n\nmediump float hexagon(mediump vec2 p, mediump float h){\n    mediump vec2 q = abs(p);\n    return max((q.y*0.866025+q.x*0.5), q.x)-h;\n}\n\nmediump float scene(mediump vec2 p){\n    mediump float width = 60.;\n    mediump mat2 T = mat2(root3_3, 0., -1./3., 2./3.);\n    mediump mat2 invT = mat2(root3, 0., root3 * 0.5, 3./2.);\n    mediump vec2 h = hex_round(T * p / width);\n    mediump vec2 center = width * invT * h;\n    mediump float d_hex = (hex_distance(h, vec2(0.))) / (iResolution.x / (2. * width));\n    mediump float d_true = length(p) / (iResolution.x / (2.));\n    mediump float fft_hex  = texture2D(iChannel0, vec2(d_hex, 0.25)).x;\n    mediump float fft_true  = texture2D(iChannel0, vec2(d_true, 0.25)).x;\n    return clamp(1. - float(hexagon(p - center, ((fft_hex + fft_true*0.3) * (width + 2.) - 1.) * sin60)), 0., 1.);\n}\n\nmediump vec3 palette(mediump float t, mediump vec3 a, mediump vec3 b, mediump vec3 c, mediump vec3 d){\n    return a + b*cos(6.28318*(c*t+d));\n}", "contentVisualizer": "uv = (gl_FragCoord.xy - (iResolution.xy * 0.5));\n    mediump mat2 R = mat2(cos60, sin60, -sin60, cos60);\n    mediump float r = (length(uv) / iResolution.x) + 0.15;\n    mediump float fft  = texture2D(iChannel0, vec2(0, 0.25)).x;\n    mediump vec2 radius = vec2(pow(fft, 6.) * 8., 0.);\n    mediump vec2 off0 = radius;\n    mediump vec2 off1 = off0 * R * R;\n    mediump vec2 off2 = off1 * R * R;\n    mediump vec3 color = vec3(scene(uv + off0),\n    scene(uv + off1),\n    scene(uv + off2));\n    mediump vec3 vignette = palette(0.75 + r, vec3(0.5), vec3(0.5), vec3(1.), vec3(0.0, 0.1, 0.2)) + 0.1;\n    visualizer = pow(color * vignette, vec3(0.5));"}