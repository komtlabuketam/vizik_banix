{"id": 20, "style": "Bar", "contentVariable": "", "contentFunction": "highp float weirdSin(highp float x, highp float amplitude, highp float halfWidth) {\n    highp float timeVar;\n    if(fract(iTime)<0.5){\n        timeVar = iTime;\n    } else {\n        timeVar = 1.0-iTime;\n    }\n    highp float f1 = sin(x*220.0);\n    highp float spdMult = 2.0;\n    highp float wavNoise = 200.0+(spdMult*fract(timeVar));\n    highp float f2 = sin(x*wavNoise);\n\n\n    highp float amp = amplitude;\n    //where halfWidth lives\n    highp float g1 = pow((x-halfWidth),2.0);\n    highp float g2 = (-(g1)*(amp*4.0))+amp;\n\n    highp float h = (((f1*f2)/2.0)*g2)+0.5;\n    return h;\n}", "contentVisualizer": "uv = gl_FragCoord.xy/iResolution.xy;\n\n    highp float baseAmp = .1;\n    highp float funkyFactor = 1.65;\n    highp float funkyTime = (texture2D(iChannel0, vec2(uv.x, 0.)).x*funkyFactor)-baseAmp;\n    if(funkyTime < 0.){\n        funkyTime *= -1.;\n    }\n    highp vec3 rgbWav;\n    if (uv.y > weirdSin(uv.x, funkyTime,0.55)){\n        if (uv.y < 0.5){\n            rgbWav = vec3(0.55);\n        } else {\n            rgbWav = vec3(0.0);\n        }\n    } else {\n        if (uv.y < 0.5){\n            rgbWav = vec3(0.0);\n        } else {\n            rgbWav = vec3(0.55);\n        }\n    }\n    highp vec3 rgbWav2;\n    if (uv.y > weirdSin(uv.x, funkyTime, 0.45)){\n        if (uv.y < 0.5){\n            rgbWav2 = vec3(0.85);\n        } else {\n            rgbWav2 = vec3(0.0);\n        }\n    } else {\n        if (uv.y < 0.5){\n            rgbWav2 = vec3(0.0);\n        } else {\n            rgbWav2 = vec3(0.85);\n        }\n    }\n    highp vec3 rgbWav3;\n    if (uv.y > weirdSin(uv.x, funkyTime, 0.5)){\n        if (uv.y < 0.5){\n            rgbWav3 = vec3(1.);\n        } else {\n            rgbWav3 = vec3(0.0);\n        }\n    } else {\n        if (uv.y < 0.5){\n            rgbWav3 = vec3(0.0);\n        } else {\n            rgbWav3 = vec3(1.);\n        }\n    }\n\n    highp vec3 lines = vec3(sin(uv.x*iResolution.x*1.2));\n    highp vec3 wavLines = rgbWav * lines;\n    highp vec3 wavLines2 = rgbWav2 * lines;\n    highp vec3 wavLines3 = rgbWav2 * lines;\n\n\n    // Output to screen\n    visualizer = vec3(wavLines.x, wavLines2.x, wavLines3.x);"}