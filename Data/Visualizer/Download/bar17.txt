{"id": 17,"style": "Bar","contentVariable": "","contentFunction": "mediump float noise3D(mediump vec3 p){\n    return fract(sin(dot(p, vec3(12.9898, 78.233, 12.7378))) * 43758.5453)*2.0-1.0;\n}\n\nmediump vec3 mixc(mediump vec3 col1, mediump vec3 col2, mediump float v){\n    v = clamp(v, 0.0, 1.0);\n    return col1+v*(col2-col1);\n}","contentVisualizer": "uv = gl_FragCoord.xy / iResolution.xy;\n    mediump vec2 p = uv*2.0-1.0;\n    p.x*=iResolution.x/iResolution.y;\n    p.y+=0.5;\n\n    mediump vec3 col = vec3(0.0);\n    mediump vec3 ref = vec3(0.0);\n\n    mediump float nBands = 48.0;\n    mediump float i = floor(uv.x*nBands);\n    mediump float f = fract(uv.x*nBands);\n    mediump float band = i/nBands;\n    band *= band*band;\n    band = band*0.995;\n    band += 0.005;\n    mediump float s = texture2D(iChannel0, vec2(band, 0.25)).x;\n\n    /* Gradient colors and amount here */\n    const mediump int nColors = 4;\n    mediump vec3 colors[nColors];\n    colors[0] = vec3(0.0, 0.0, 1.0);\n    colors[1] = vec3(0.0, 1.0, 1.0);\n    colors[2] = vec3(1.0, 1.0, 0.0);\n    colors[3] = vec3(1.0, 0.0, 0.0);\n\n    mediump vec3 gradCol = colors[0];\n    mediump float n = float(nColors)-1.0;\n    for (mediump int i = 1; i < nColors; i++){\n        gradCol = mixc(gradCol, colors[i], (s-float(i-1)/n)*n);\n    }\n    col += vec3(1.0-smoothstep(0.0, 0.01, p.y-s*1.5));\n    col *= gradCol;\n    ref += vec3(1.0-smoothstep(0.0, -0.01, p.y+s*1.5));\n    ref*= gradCol*smoothstep(-0.5, 0.5, p.y);\n    col = mix(ref, col, smoothstep(-0.01, 0.01, p.y));\n    col *= smoothstep(0.125, 0.375, f);\n    col *= smoothstep(0.875, 0.625, f);\n    col = clamp(col, 0.0, 1.0);\n    mediump float dither = noise3D(vec3(p, iTime))*2.0/256.0;\n    col += dither;\n    visualizer = col;"}