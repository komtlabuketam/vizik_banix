{"id": 22, "style": "Spectrum", "contentVariable": "#define RED vec3(1,0,0)\n#define GREEN vec3(0,1,0)\n#define BLUE vec3(0,0,1)\n#define BARS 1\n#define ROTATE 0\n#define BAR_SCALE 140.", "contentFunction": "mediump vec3 fromRedToGreen( mediump float interpolant ){\n    if( interpolant < 0.5 ){\n        return vec3(1.0, 2.0 * interpolant, 0.0);\n    } else {\n        return vec3(2.0 - 2.0 * interpolant, 1.0, 0.0 );\n    }\n}\nmediump vec3 fromGreenToBlue( mediump float interpolant ){\n    if( interpolant < 0.5 ){\n        return vec3(0.0, 1.0, 2.0 * interpolant);\n    } else {\n        return vec3(0.0, 2.0 - 2.0 * interpolant, 1.0 );\n    }\n}\nmediump vec3 heat5( mediump float interpolant ){\n    mediump float invertedInterpolant = interpolant;\n    if( invertedInterpolant < 0.5 ){\n        mediump float remappedFirstHalf = 1.0 - 2.0 * invertedInterpolant;\n        return fromGreenToBlue( remappedFirstHalf );\n    } else {\n        mediump float remappedSecondHalf = 2.0 - 2.0 * invertedInterpolant;\n        return fromRedToGreen( remappedSecondHalf );\n    }\n}", "contentVisualizer": "uv = gl_FragCoord.xy/iResolution.xy;\n    mediump float actualAngle = mod(iTime /34., 1.) * 2. * 3.1415927;\n    #if ROTATE\n    mediump vec2 actualVector = vec2(cos(actualAngle), sin(actualAngle));\n    #else\n    mediump vec2 actualVector = vec2(0.,1.);\n    #endif\n    mediump vec2 lVector = uv - vec2(.5);\n    mediump float lBar = length(lVector);\n    mediump float angle = acos(dot(normalize(lVector), actualVector));\n    angle /= 3.1415927;\n    #ifdef BAR_SCALE\n    #if BARS\n    angle = floor(angle*BAR_SCALE)/BAR_SCALE;\n    #endif\n    #endif\n    mediump float myF = 0.5*texture2D(iChannel0, vec2(angle, 0)).x;\n    mediump vec3 barColor = heat5(myF*2.)*.7;\n    #if BARS\n    gl_FragColor = (myF > lBar) ? vec4(barColor,1.) : vec4(0);\n    #else\n    gl_FragColor = (abs(myF - lBar) < 0.01) ? vec4(barColor,1.) : vec4(0);\n    #endif\n    visualizer = gl_FragColor.rgb;"}