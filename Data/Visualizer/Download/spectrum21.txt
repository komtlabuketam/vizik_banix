{"id": 21, "style": "Spectrum", "contentVariable": "const mediump float RATIO_9_16 = 0.5625;\nconst mediump float RATIO_16_9 = 1.777778;\nconst mediump float RATIO_3_4 = 0.75;\nconst mediump float RATIO_4_3 = 1.3333333;\nconst mediump float RATIO_1_1 = 1.;", "contentFunction": "mediump vec2 rav (mediump vec2 uv){\n    mediump vec2 remapuv = 2.*uv - 1.;\n    mediump float radius = length (remapuv);\n    mediump float corner = ((atan(remapuv.g, remapuv.r)/6.28318530718)+0.5);\n    uv = vec2(radius, corner);\n    return uv;\n}\n\nmediump float remap(mediump float s, mediump float a1, mediump float a2, mediump float b1, mediump float b2){\n    return b1 + (s-a1)*(b2-b1)/(a2-a1);\n}\n\nmediump vec3 hue (mediump vec3 col, mediump float hueAdjust){\n    const mediump vec4  kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);\n    const mediump vec4  kRGBToI     = vec4 (0.596, -0.275, -0.321, 0.0);\n    const mediump vec4  kRGBToQ     = vec4 (0.212, -0.523, 0.311, 0.0);\n    const mediump vec4  kYIQToR   = vec4 (1.0, 0.956, 0.621, 0.0);\n    const mediump vec4  kYIQToG   = vec4 (1.0, -0.272, -0.647, 0.0);\n    const mediump vec4  kYIQToB   = vec4 (1.0, -1.107, 1.704, 0.0);\n    mediump vec4 color = vec4(col, 1.0);\n    mediump float   YPrime  = dot (color, kRGBToYPrime);\n    mediump float   I      = dot (color, kRGBToI);\n    mediump float   Q      = dot (color, kRGBToQ);\n    mediump float   hue     = atan (Q, I);\n    mediump float   chroma  = sqrt (I * I + Q * Q);\n    hue += hueAdjust;\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n    mediump vec4    yIQ   = vec4 (YPrime, I, Q, 0.0);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n    return color.rgb;\n}", "contentVisualizer": "uv = gl_FragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    mediump float a = (iResolution.x/iResolution.y);\n    if (a == RATIO_1_1){\n\n    } else if (abs(a - RATIO_9_16) < 0.01){\n        uv.x += 0.225;\n    } else if (abs(a - RATIO_3_4) < 0.01){\n        uv.x += 0.125;\n    } else if (abs(a - RATIO_16_9) < 0.01){\n        uv.x -= 0.39;\n    } else if (abs(a - RATIO_4_3) < 0.01){\n        uv.x -= 0.175;\n    }\n    mediump vec2 rf = vec2(rav(uv));\n    rf.y -=0.15;\n    mediump float count = 60.0;\n    mediump vec2 i = floor(rf*count);\n    mediump float sz = 0.4;\n    mediump float ring = smoothstep(rf.x, rf.x + 0.01, sz);\n    mediump float c = fract(i.y/count*2.0);\n    mediump float r = fract(i.x/count);\n    mediump float s1 = texture2D(iChannel0, vec2(c, 0.01)).r;\n    mediump float s2 = texture2D(iChannel0, vec2(rf.x*0.001+0.5, 0.01)).r;\n    mediump float m = fract(rf.y*count+0.5);\n    m = m*(1.0-m)*4.0;\n    mediump float m1 = smoothstep(m, m+0.1, 0.99);\n    mediump float m2 = clamp(smoothstep(m, m+0.1, 0.01)+m1, 0.0, 1.0);\n    mediump float size = remap(sz*2.0, rf.x+sz, rf.x, 0.0, 1.0);\n    mediump float r1 = step(size, s1)*(1.0-ring)*m2;\n    mediump float r2 = step(remap(rf.x, 0.1, 0.0, 1.0, sz), s2);\n    mediump float msk = step(rf.y, 0.5);\n    mediump vec3 color = vec3(0.0, 0.4, 1.0);\n    mediump float rm = smoothstep(rf.x, rf.x+0.01, remap(s2, 0.0, 1.0, 0.1, sz-0.1));\n    mediump float val = remap(s1, 0.0, 1.0, 0.0, 6.0);\n    mediump vec3 col = 1.6*hue(color, val)*r1 + 1.6*hue(color, remap(s2, 0.0, 1.0, 0.0, 6.0))*rm;\n    visualizer = col;"}