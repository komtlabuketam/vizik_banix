{"id": 8, "contentVariable": "", "contentFunction": "mediump vec3 mod289Vec3(mediump vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nmediump vec4 mod289Vec4(mediump vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nmediump vec4 permuteTransition(mediump vec4 x) {\n    return mod289Vec4(((x*34.0)+1.0)*x);\n}\n\nmediump vec4 taylorInvSqrt(mediump vec4 r){\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nmediump float snoise(mediump vec3 v) {\n\n    const mediump vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const mediump vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    mediump vec3 i  = floor(v + dot(v, C.yyy) );\n    mediump vec3 x0 =   v - i + dot(i, C.xxx) ;\n    mediump vec3 g = step(x0.yzx, x0.xyz);\n    mediump vec3 l = 1.0 - g;\n    mediump vec3 i1 = min( g.xyz, l.zxy );\n    mediump vec3 i2 = max( g.xyz, l.zxy );\n    mediump vec3 x1 = x0 - i1 + C.xxx;\n    mediump vec3 x2 = x0 - i2 + C.yyy;\n    mediump vec3 x3 = x0 - D.yyy;\n\n    i = mod289Vec3(i);\n    mediump vec4 p = permuteTransition( permuteTransition( permuteTransition(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    mediump float n_ = 0.142857142857; // 1.0/7.0\n    mediump vec3  ns = n_ * D.wyz - D.xzx;\n\n    mediump vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    mediump vec4 x_ = floor(j * ns.z);\n    mediump vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    mediump vec4 x = x_ *ns.x + ns.yyyy;\n    mediump vec4 y = y_ *ns.x + ns.yyyy;\n    mediump vec4 h = 1.0 - abs(x) - abs(y);\n\n    mediump vec4 b0 = vec4( x.xy, y.xy );\n    mediump vec4 b1 = vec4( x.zw, y.zw );\n\n    mediump vec4 s0 = floor(b0)*2.0 + 1.0;\n    mediump vec4 s1 = floor(b1)*2.0 + 1.0;\n    mediump vec4 sh = -step(h, vec4(0.0));\n\n    mediump vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    mediump vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    mediump vec3 p0 = vec3(a0.xy,h.x);\n    mediump vec3 p1 = vec3(a0.zw,h.y);\n    mediump vec3 p2 = vec3(a1.xy,h.z);\n    mediump vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    mediump vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    mediump vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nmediump vec3 curlNoise( mediump vec3 p ){\n    const mediump float e = 0.1;\n    mediump float  n1 = snoise(vec3(p.x, p.y + e, p.z));\n    mediump float  n2 = snoise(vec3(p.x, p.y - e, p.z));\n    mediump float  n3 = snoise(vec3(p.x, p.y, p.z + e));\n    mediump float  n4 = snoise(vec3(p.x, p.y, p.z - e));\n    mediump float  n5 = snoise(vec3(p.x + e, p.y, p.z));\n    mediump float  n6 = snoise(vec3(p.x - e, p.y, p.z));\n\n    mediump float x = n2 - n1 - n4 + n3;\n    mediump float y = n4 - n3 - n6 + n5;\n    mediump float z = n6 - n5 - n2 + n1;\n    const mediump float divisor = 1.0 / ( 2.0 * e );\n    return normalize( vec3( x , y , z ) * divisor );\n}", "contentTransition": "mediump float f = translatePercent;\n        mediump vec3 curl = curlNoise(vec3(uv,1.) *5. + iTime) / 1.;\n        mediump vec4 t0 = texture2D(iChannel1, vec2(uv.x,uv.y + f * (curl.x) ) );\n        mediump vec4 t1 = texture2D(iChannel3, vec2(uv.x,uv.y + (1.-f) * (curl.x) ));\n        uv.x += curl.x;\n        background = mix(t0,t1,f).rgb;"}