{"id": 11, "contentVariable": "const mediump vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\nconst mediump vec2 boundMin = vec2(0.0, 0.0);\nconst mediump vec2 boundMax = vec2(1.0, 1.0);", "contentFunction": "mediump float rand(mediump vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nbool inBounds (mediump vec2 p) {\n    return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\n}\n\nmediump vec2 project (mediump vec2 p) {\n    return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\n}\n\nmediump vec4 bgColor (mediump vec2 p, mediump vec2 pto, mediump float reflection) {\n    mediump vec4 c = black;\n    pto = project(pto);\n    if (inBounds(pto)) {\n        c += mix(black, texture2D(iChannel3, p), reflection * mix(1.0, 0.0, pto.y));\n    }\n    return c;\n}", "contentTransition": "mediump float reflection = 0.4;\n        mediump float perspective = 0.4;\n        mediump float depth = 3.;\n        mediump float progress = translatePercent;\n        mediump vec2 p = vec2(gl_FragCoord.x / iResolution.x, 1.0 - gl_FragCoord.y / iResolution.y);\n        mediump vec2 pfr = vec2(-1.), pto = vec2(-1.);\n        mediump float middleSlit = 2.0 * abs(p.x-0.5) - progress;\n        if (middleSlit > 0.0) {\n            pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*progress, 0.0);\n            mediump float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));\n            pfr.y -= d/2.;\n            pfr.y *= d;\n            pfr.y += d/2.;\n        }\n        mediump float size = mix(1.0, depth, 1.-progress);\n        pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);\n        if (inBounds(pfr)) {\n            background = texture2D(iChannel1, pfr).rgb;\n        } else if (inBounds(pto)) {\n            background = texture2D(iChannel3, pto).rgb;\n        } else {\n            background = bgColor(p, pto, reflection).rgb;\n        }"}